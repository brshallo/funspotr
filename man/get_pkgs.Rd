% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get-pkgs.R
\name{get_pkgs}
\alias{get_pkgs}
\title{Get packages loaded or used in file}
\usage{
get_pkgs(file_path, as_yaml_tags = FALSE)
}
\arguments{
\item{file_path}{Character of length one of path to file of interest.}

\item{as_yaml_tags}{Logical, default is \code{FALSE}. If set to \code{TRUE} flattens
and puts into a format convenient for pasting in "tags" section of a
blogdown post.}
}
\value{
Character vector of all packages used in file. Packages are extracted
solely based on text -- not whether the package actually exists or not.
Hence even packages that you do not have installed on your machine but
show-up in the script will be returned in the character vector.
}
\description{
Extract all \code{pkg} called in either \code{library(pkg)}, \code{require(pkg)}
\code{requireNamespace("pkg")} or \code{pkg::fun()}. Will not identify packages loaded
in other ways not typically done in interactive R scripts (e.g. relying on a
DESCRIPTION file for a pkg or something like \code{source("lib-calls.R")}).
Inspiration: https://github.com/rstudio/blogdown/issues/647
}
\details{
This would be better handled by something like \code{renv::dependencies()} or
established packages for identifying package dependencies.
}
\examples{
library(indexrfiles)

file_lines <- "
library(dplyr)
require(tidyr)
library(madeUpPkg)

as_tibble(mpg) \%>\%
  group_by(class) \%>\%
  nest() \%>\%
  mutate(stats = purrr::map(data,
                            ~lm(cty ~ hwy, data = .x)))

made_up_fun()
"

file_output <- tempfile(fileext = ".R")
writeLines(file_lines, file_output)

get_pkgs(file_output)

# For if you use blogdown, there is an argument to return the identified
# packages in a way that is convenient for adding them to the tags section of
# a yaml header.
get_pkgs(file_output, as_yaml_tags = TRUE)
}
