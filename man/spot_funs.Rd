% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spot-funs.R
\name{spot_funs}
\alias{spot_funs}
\title{Spot Functions}
\usage{
spot_funs(file_path, ...)
}
\arguments{
\item{file_path}{character vector of path to file. This function depends on
\code{NCmisc::list.function.in_file()} which requries an actual file_path for a
file passed in.}

\item{...}{This allows you to pass additional arguments to
\code{spot_funs_custom()} that may be useful when not all packages in \code{file_path}
are available on the machine. See \code{?spot_funs_custom} for documentation.}
}
\value{
Given default arguments and no missing packages A dataframe with the
following columns is returned: \code{funs}: specifying functions in file.
\code{pkgs}: the package a function came from. If \code{funs} is a custom function or
if it came from a package not installed on your machine, \code{pkgs} will return
"(unknown)". \code{in_multiple_pkgs}: logical, sometimes a function name may
exist in multiple packages loaded. If that is the case then a separate line
will be printed for each loaded package containing the function and
\code{in_multiple_pkgs} will be \code{TRUE} for each. (Ideally this column would not
need to exist and the function could determine which pkg the function is
coming from -- maybe in a future version...)

Note that any unknown pkgs do not show-up in \code{pkgs} but are simply dropped
(any of their functions simply have \code{pkgs} equal to "unknown").
}
\description{
Given \code{file_path} extract all functions and their associated packages from
specified file.
}
\details{
\code{spot_funs()} uses \code{spot_funs_custom()} to run -- it is just a less verbose
version and does not require passing in the packages separately. See
\code{?spot_funs_custom} for details on how the function works.
}
\examples{
library(funspotr)

file_lines <- "
library(dplyr)
require(tidyr)
library(madeUpPkg)

as_tibble(mpg) \%>\%
  group_by(class) \%>\%
  nest() \%>\%
  mutate(stats = purrr::map(data,
                            ~lm(cty ~ hwy, data = .x)))

made_up_fun()
"

file_output <- tempfile(fileext = ".R")
writeLines(file_lines, file_output)

# Notice is not able to determine singular package for as_tibble()
spot_funs(file_output)
}
