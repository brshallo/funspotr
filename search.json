[{"path":"https://brshallo.github.io/funspotr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 funspotr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://brshallo.github.io/funspotr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bryan Shalloway. Author, maintainer.","code":""},{"path":"https://brshallo.github.io/funspotr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Shalloway B (2022). funspotr: Spot R Functions & Packages. R package version 0.0.1, https://brshallo.github.io/funspotr/.","code":"@Manual{,   title = {funspotr: Spot R Functions & Packages},   author = {Bryan Shalloway},   year = {2022},   note = {R package version 0.0.1},   url = {https://brshallo.github.io/funspotr/}, }"},{"path":"https://brshallo.github.io/funspotr/index.html","id":"funspotr-","dir":"","previous_headings":"","what":"Spot R Functions & Packages","title":"Spot R Functions & Packages","text":"Spot functions file Previewing customizing files parse Files didn’t write Package dependencies another file Show function calls Helper blogdown tags Unexported functions funspotr::spot_funs() works Limitations, Problems, Musings Installation goal funspotr (R function spotter) make easy identify functions packages used files projects. initially written create reference tables functions packages used popular github repositories[1]. roughly three types functions funspotr: list_files_*(): identify files repository related location spot_*(): identify functions packages files helpers manipulate plot outputs functions funspotr primarily designed identifying functions / packages self-contained files collections files[2] like R markdown files blogdown projects respectively[3].","code":""},{"path":"https://brshallo.github.io/funspotr/index.html","id":"spot-functions-in-a-file","dir":"","previous_headings":"","what":"Spot functions in a file","title":"Spot R Functions & Packages","text":"primary function funspotr spot_funs() returns dataframe showing functions associated packages used file. funs: functions file pkgs: best guess package functions came …[4]","code":"library(funspotr) library(dplyr)  file_lines <- \" library(dplyr) require(tidyr)  as_tibble(mpg) %>%    mutate(class = as.character(class)) %>%   group_by(class) %>%   nest() %>%   mutate(stats = purrr::map(data,                             ~lm(cty ~ hwy, data = .x)))   made_up_fun() \"  file_output <- tempfile(fileext = \".R\") writeLines(file_lines, file_output)  spot_funs(file_path = file_output) #> # A tibble: 10 x 2 #>    funs         pkgs      #>    <chr>        <chr>     #>  1 library      base      #>  2 require      base      #>  3 as_tibble    tidyr     #>  4 mutate       dplyr     #>  5 as.character base      #>  6 group_by     dplyr     #>  7 nest         tidyr     #>  8 map          purrr     #>  9 lm           stats     #> 10 made_up_fun  (unknown)"},{"path":"https://brshallo.github.io/funspotr/index.html","id":"spot-functions-on-all-files-in-a-project","dir":"","previous_headings":"","what":"Spot functions on all files in a project","title":"Spot R Functions & Packages","text":"funspotr list_files_*() functions return dataframe relative_paths absolute_paths R R markdown files specified location (e.g. github repo, gists). can combined variant spot_funs() maps function across file path found, spot_funs_files(): relative_paths : relative filepath absolute_paths: absolute filepath (case URL raw file github) spotted: purrr::safely() style list-column results[5] mapping spot_funs() across absolute_paths. results may unnested helper funspotr::unnest_results() provide table functions packages filepath. can manipulated like dataframe – say want filter files , readr rsample packages used. outputs funspotr::unnest_results() can also passed funspotr::network_plot() build network visualization connections functions/packages files[6].","code":"# repo for an old presentation I gave gh_ex <- list_files_github_repo(   repo = \"brshallo/feat-eng-lags-presentation\",    branch = \"main\") %>%    spot_funs_files()  gh_ex #> # A tibble: 4 x 3 #>   relative_paths                absolute_paths                      spotted      #>   <chr>                         <chr>                               <list>       #> 1 R/Rmd-to-R.R                  https://raw.githubusercontent.com/~ <named list> #> 2 R/feat-engineering-lags.R     https://raw.githubusercontent.com/~ <named list> #> 3 R/load-inspections-save-csv.R https://raw.githubusercontent.com/~ <named list> #> 4 R/types-of-splits.R           https://raw.githubusercontent.com/~ <named list> gh_ex %>%    unnest_results() %>%    filter(pkgs %in% c(\"here\", \"readr\", \"rsample\")) #> # A tibble: 8 x 4 #>   funs               pkgs    relative_paths                absolute_paths        #>   <chr>              <chr>   <chr>                         <chr>                 #> 1 here               here    R/Rmd-to-R.R                  https://raw.githubus~ #> 2 read_csv           readr   R/feat-engineering-lags.R     https://raw.githubus~ #> 3 initial_time_split rsample R/feat-engineering-lags.R     https://raw.githubus~ #> 4 training           rsample R/feat-engineering-lags.R     https://raw.githubus~ #> 5 testing            rsample R/feat-engineering-lags.R     https://raw.githubus~ #> 6 sliding_period     rsample R/feat-engineering-lags.R     https://raw.githubus~ #> 7 write_csv          readr   R/load-inspections-save-csv.R https://raw.githubus~ #> 8 here               here    R/load-inspections-save-csv.R https://raw.githubus~"},{"path":"https://brshallo.github.io/funspotr/index.html","id":"previewing-and-customizing-files-to-parse","dir":"","previous_headings":"Spot functions on all files in a project","what":"Previewing and customizing files to parse","title":"Spot R Functions & Packages","text":"might want parse subset files repo. Say want parse “types--splits.R” “Rmd--R.R” files. Note lot files repo may need set-sleep periods clone repo locally parse files stay within limits github API hits.","code":"preview_files <- list_files_github_repo(   repo = \"brshallo/feat-eng-lags-presentation\",    branch = \"main\")  preview_files #> # A tibble: 4 x 2 #>   relative_paths                absolute_paths                                   #>   <chr>                         <chr>                                            #> 1 R/Rmd-to-R.R                  https://raw.githubusercontent.com/brshallo/feat~ #> 2 R/feat-engineering-lags.R     https://raw.githubusercontent.com/brshallo/feat~ #> 3 R/load-inspections-save-csv.R https://raw.githubusercontent.com/brshallo/feat~ #> 4 R/types-of-splits.R           https://raw.githubusercontent.com/brshallo/feat~ preview_files %>%    filter(stringr::str_detect(relative_paths, \"types-of-splits|Rmd-to-R\")) %>%    spot_funs_files() %>%    unnest_results() #> # A tibble: 24 x 4 #>    funs      pkgs      relative_paths      absolute_paths                        #>    <chr>     <chr>     <chr>               <chr>                                 #>  1 purl      knitr     R/Rmd-to-R.R        https://raw.githubusercontent.com/br~ #>  2 here      here      R/Rmd-to-R.R        https://raw.githubusercontent.com/br~ #>  3 library   base      R/types-of-splits.R https://raw.githubusercontent.com/br~ #>  4 theme_set ggplot    R/types-of-splits.R https://raw.githubusercontent.com/br~ #>  5 theme_bw  ggplot    R/types-of-splits.R https://raw.githubusercontent.com/br~ #>  6 set.seed  base      R/types-of-splits.R https://raw.githubusercontent.com/br~ #>  7 tibble    dplyr     R/types-of-splits.R https://raw.githubusercontent.com/br~ #>  8 rep       base      R/types-of-splits.R https://raw.githubusercontent.com/br~ #>  9 today     lubridate R/types-of-splits.R https://raw.githubusercontent.com/br~ #> 10 days      lubridate R/types-of-splits.R https://raw.githubusercontent.com/br~ #> # ... with 14 more rows"},{"path":[]},{"path":"https://brshallo.github.io/funspotr/index.html","id":"files-you-didnt-write","dir":"","previous_headings":"Other Things","what":"Files you didn’t write","title":"Spot R Functions & Packages","text":"Functions created file well functions unavailable packages (packages don’t exist) output pkgs = \"(unknown)\". spot package function must package installed locally. Hence files others’ github repos created different machine, good idea start funspotr::check_pkgs_availability() see packages missing. funspotr:::install_missing_pkgs() unexported helper installing missing packages (see “R/spot-pkgs.R” documentation): Alternatively, may want clone repository locally use renv::dependencies() start using funspotr[7].","code":"file_lines_missing_pkgs <- \" library(dplyr)  as_tibble(mpg)  hello_world <- function() print('hello world')  madeuppkg::made_up_fun()  hello_world() \"  missing_pkgs_ex <- tempfile(fileext = \".R\") writeLines(file_lines_missing_pkgs, missing_pkgs_ex)  spot_funs(file_path = missing_pkgs_ex) #> # A tibble: 5 x 2 #>   funs        pkgs      #>   <chr>       <chr>     #> 1 library     base      #> 2 as_tibble   dplyr     #> 3 print       base      #> 4 made_up_fun (unknown) #> 5 hello_world (unknown) check_pkgs_availability(file_path) %>%    funspotr:::install_missing_pkgs()"},{"path":"https://brshallo.github.io/funspotr/index.html","id":"package-dependencies-in-another-file","dir":"","previous_headings":"Other Things","what":"Package dependencies in another file","title":"Spot R Functions & Packages","text":"spot_funs() currently set-self-contained files. spot_funs_custom() allows user explicitly specify pkgs functions may come . useful cases packages loaded location file_path (e.g. loaded via source() DESCRIPTION file, workflow). example, made-example library() calls made separate file source()d . Also see funspotr:::spot_pkgs_from_description().","code":"# file where packages are loaded file_libs <- \"library(dplyr) library(lubridate)\"  file_libs_output <- tempfile(fileext = \".R\") writeLines(file_libs, file_libs_output)  # File of interest where things happen file_run <- glue::glue( \"source('{ file_libs_output }')    tibble::tibble(days_from_today = 0:10) %>%      mutate(date = today() + days(days_from_today)) \",  file_libs_output = stringr::str_replace_all(file_libs_output, \"\\\\\\\\\", \"/\") )  file_run_output <- tempfile(fileext = \".R\") writeLines(file_run, file_run_output)  # Identify packages using both files and then pass in explicitly to `spot_funs_custom()` pkgs <- c(spot_pkgs(file_libs_output),            spot_pkgs(file_run_output, show_explicit_funs = TRUE))  spot_funs_custom(   pkgs = pkgs,   file_path = file_run_output) #> # A tibble: 5 x 2 #>   funs   pkgs      #>   <chr>  <chr>     #> 1 source base      #> 2 tibble tibble    #> 3 mutate dplyr     #> 4 today  lubridate #> 5 days   lubridate"},{"path":"https://brshallo.github.io/funspotr/index.html","id":"show-all-function-calls","dir":"","previous_headings":"Other Things","what":"Show all function calls","title":"Spot R Functions & Packages","text":"Passing show_each_use = TRUE ... spot_funs() spot_funs_files() return instances function call rather just file. Compared initial example, mutate() now shows-rows 4 8:","code":"spot_funs(file_path = file_output, show_each_use = TRUE) #> # A tibble: 11 x 2 #>    funs         pkgs      #>    <chr>        <chr>     #>  1 library      base      #>  2 require      base      #>  3 as_tibble    tidyr     #>  4 mutate       dplyr     #>  5 as.character base      #>  6 group_by     dplyr     #>  7 nest         tidyr     #>  8 mutate       dplyr     #>  9 map          purrr     #> 10 lm           stats     #> 11 made_up_fun  (unknown)"},{"path":"https://brshallo.github.io/funspotr/index.html","id":"helper-for-blogdown-tags","dir":"","previous_headings":"Other Things","what":"Helper for blogdown tags","title":"Spot R Functions & Packages","text":"Setting as_yaml_tags = TRUE spot_pkgs() flattens dependencies outputs format can copied pasted tags section blogdown post’s YAML header. spot_pkgs_used() return packages functions actually used[8]. automatically packages used tags post can add function funspotr::spot_tags() bullet tags argument YAML header[9]. example:","code":"# Example from old blogdown post spot_pkgs(   file_path = \"https://raw.githubusercontent.com/brshallo/brshallo/master/content/post/2020-02-06-maximizing-magnetic-volume-the-perfect-bowl.Rmd\",   as_yaml_tags = TRUE) %>%    cat() #>   - knitr #>   - tidyverse #>   - ggforce --- title: This is a post author: brshallo date: '2022-02-11' tags:    - \"`r funspotr::spot_tags()`\" slug: this-is-a-post ---"},{"path":"https://brshallo.github.io/funspotr/index.html","id":"unexported-functions","dir":"","previous_headings":"Other Things","what":"Unexported functions","title":"Spot R Functions & Packages","text":"Many unexported functions funspotr may helpful building workflows mapping spot_funs() across multiple files[10] suggestion function, feel free open issue.","code":""},{"path":"https://brshallo.github.io/funspotr/index.html","id":"how-funspotrspot_funs-works","dir":"","previous_headings":"","what":"How funspotr::spot_funs() works","title":"Spot R Functions & Packages","text":"funspotr mimics search space file prior identifying pkgs/funs[11]. high-level… Create new R instance using callr Load packages. Explicit calls (e.g. pkg::fun()) loaded individually via import loaded last (putting top search space)[12]. (steps 1 2 needed step 4 best chance identifying package function comes file.) Pass file utils::getParseData() filter just functions[13] Pass functions utils::find() identify associated package","code":""},{"path":"https://brshallo.github.io/funspotr/index.html","id":"limitations-problems-musings","dir":"","previous_headings":"","what":"Limitations, Problems, Musings","title":"Spot R Functions & Packages","text":"file contains R syntax well defined parsed return error. See formatR#-notes (used {funspotr} parsing) common reasons failure. knitr::read_chunk() knitr::purl() file passed {funspotr} also frequently cause error parsing. See knitr#1753 & knitr#1938 Please open issue find cases parsing breaks :-) . mentioned elsewhere, default parsing spot_funs() primarily cases package dependencies loaded file used [14]. Scripts self-contained typically pkgs argument provided explicitly via spot_funs_custom(). funspotr pay attention functions reexported elsewhere. example, many tibble functions reexported dplyr tidyr – funspotr though know “true” home functions simply looking top search space[15]. Feel free open issue ’d interested simplifying function vignette mapping spot_funs() folder structures yet mentioned. functions “R/spot-pkgs.R” probably better handled something like renv::dependencies() parsing based approach. simple regex’s use variety problems. just one example funspotr::get_pkgs() recognize package within quotes escaped[16]. Another useful package installing missing dependencies may attachment. `funspotr’s current approach slow Current approach uses imperfect heuristics identify infix operators, e.g. +[17] funspotr lots dependencies. may make sense move non-core functionality separate package (e.g. stuff concerning list_files*()) Rather running list_files_github_repo() may make sense instead clone repo locally run list_files_wd() repo prior running spot_funs_files() limit number API hits github. Currently ’s possible github block pretty soon due hitting many files (case ’ll likely get 403 connection error). things probably done reduce number github API hits (e.g. bullet, Sys.sleep(), …). Throughout code package documentation “inspiration” bullets followed link pointing places took stuff stack overflow, github, packages. Also see footnotes README","code":""},{"path":"https://brshallo.github.io/funspotr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Spot R Functions & Packages","text":"can install development version funspotr GitHub : [1] following posts written using initial API funspotr – key functions used posts now deprecated: - Identifying R Functions & Packages Used GitHub Repos (funspotr part 1) - Identifying R Functions & Packages Github Gists (funspotr part 2) - Network Plots Code Collections (funspotr part 3) [2] See Package dependencies another file [3] Rather , example, targets workflows. Also, cases funspotr may identify every function /package file (see Limitations, Problems, Musings) read source code details). [4] in_multiple_pkgs: (default dropped, pass keep_in_multiple_pkgs = TRUE ... display)Whether function multiple packages/environments ’s (guessed) search space. default package top search space returned. E.g. as_tibble() attributed tidyr spot_funs() however as_tibble() also dplyr. don’t worry getting root source package fact packages just reexporting tibble. Setting keep_search_list = TRUE return rows item search list may helpful getting unexpected results.) [5] list-column output item list containing result error. [6] Took inspiration plot() method cranly. [7] renv robust approach finding installing dependencies – particularly cases missing many dependencies don’t want alter packages global library. [8] E.g. cases library calls aren’t actually used file. may useful cases metapackages like tidyverse tidymodels loaded packages actually used. [9] See (blogdown#647, blogdown#693) explanation funspotr::spot_tags() works. [10] unexported functions funspotr still include man file least partial documentation. [11] language like python, calls explicit (e.g. np.*), stuff recreating search space likely unnecessary just identify packages/functions simple parsing. [12] heuristic imperfect means file “library(dplyr); select(); MASS::select()” view select() calls coming {MASS} – view first coming {dplyr} second {MASS}. [13] inspired NCmisc::list.functions..file(). [14] .e. interactive R scripts Rmd documents use library() related calls within script. [15] example reviewing David Robinson’s Tidy Tuesday code found meme package used far expected. Turns just due reexporting aes() function ggplot. [16] e.g. case lines <- \"library(pkg)\" pkg show-dependency despite just part quote rather actually loaded. [17] maybe ’s fine though.","code":"# install.packages(\"devtools\") devtools::install_github(\"brshallo/funspotr\")"},{"path":"https://brshallo.github.io/funspotr/reference/call_r_list_functions_doc.html","id":null,"dir":"Reference","previous_headings":"","what":"Call R List Functions — call_r_list_functions_doc","title":"Call R List Functions — call_r_list_functions_doc","text":"next several function created make namespaces slightly better -- honestly sure worth added complexity created. essentially: explicit function calls (.e. pkg::fun() ) spot_funs() / spot_funs_custom() run call_r_list_functions() identify functions packages, explicit functions run call_r_list_functions_explicit() thing call_r_list_functions() except first loads regular packages attaches explicit function calls -- impact giving explicit function calls precedence terms identified attaching entire package (way prior approaches ). still problems cases whole think better... functions use import package manage process takes approach described : https://github.com/rticulate/import/issues/57","code":""},{"path":"https://brshallo.github.io/funspotr/reference/call_r_list_functions_doc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Call R List Functions — call_r_list_functions_doc","text":"","code":"call_r_list_functions(pkgs, file_temp, show_each_use = FALSE)  call_r_list_functions_explicit(   pkgs,   pkgs_explicit,   file_temp,   show_each_use = FALSE )"},{"path":"https://brshallo.github.io/funspotr/reference/call_r_list_functions_doc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Call R List Functions — call_r_list_functions_doc","text":"pkgs Character vector packages loaded via library, require, etc, file_temp character vector path file. cases temporary file. show_each_use Logical, default FALSE. changed TRUE return individual rows time function used (rather just entire file). pkgs_explicit Packages used explicitly, e.g. pkg::fun().","code":""},{"path":"https://brshallo.github.io/funspotr/reference/check_pkgs_availability.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Packages Availability — check_pkgs_availability","title":"Check Packages Availability — check_pkgs_availability","text":"See example way may use funspotr.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/check_pkgs_availability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Packages Availability — check_pkgs_availability","text":"","code":"check_pkgs_availability(pkgs, quietly = TRUE)"},{"path":"https://brshallo.github.io/funspotr/reference/check_pkgs_availability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Packages Availability — check_pkgs_availability","text":"pkgs Character vector package names. (Typically output spot_pkgs()). quietly logical: progress error messages suppressed?","code":""},{"path":"https://brshallo.github.io/funspotr/reference/check_pkgs_availability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Packages Availability — check_pkgs_availability","text":"Named logical vector indicating whether package available machine.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/check_pkgs_availability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Packages Availability — check_pkgs_availability","text":"","code":"library(funspotr) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  file_lines <- \" library(dplyr) require(tidyr) library(madeUpPkg)  as_tibble(mpg) %>%   group_by(class) %>%   nest() %>%   mutate(stats = purrr::map(data,                             ~lm(cty ~ hwy, data = .x)))  made_up_fun() \"  file_output <- tempfile(fileext = \".R\") writeLines(file_lines, file_output)  spot_pkgs(file_output) %>%   check_pkgs_availability() #>     dplyr     tidyr madeUpPkg     purrr  #>      TRUE      TRUE     FALSE      TRUE"},{"path":"https://brshallo.github.io/funspotr/reference/did_safely_error.html","id":null,"dir":"Reference","previous_headings":"","what":"Did Safely Error — did_safely_error","title":"Did Safely Error — did_safely_error","text":"Safely Error","code":""},{"path":"https://brshallo.github.io/funspotr/reference/did_safely_error.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Did Safely Error — did_safely_error","text":"","code":"did_safely_error(safely_named_list)"},{"path":"https://brshallo.github.io/funspotr/reference/did_safely_error.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Did Safely Error — did_safely_error","text":"safely_named_list Named list outputted purrr::safely() index contains \"error\" \"result\" element.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/did_safely_error.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Did Safely Error — did_safely_error","text":"logical vector","code":""},{"path":"https://brshallo.github.io/funspotr/reference/funspotr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"funspotr: Spot R Functions & Packages — funspotr-package","title":"funspotr: Spot R Functions & Packages — funspotr-package","text":"learn funspotr see https://github.com/brshallo/funspotr","code":""},{"path":[]},{"path":"https://brshallo.github.io/funspotr/reference/funspotr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"funspotr: Spot R Functions & Packages — funspotr-package","text":"Maintainer: Bryan Shalloway brshallodev@gmail.com","code":""},{"path":"https://brshallo.github.io/funspotr/reference/github_contents.html","id":null,"dir":"Reference","previous_headings":"","what":"Github Contents — github_contents","title":"Github Contents — github_contents","text":"List files folders github repo. inspiration: https://stackoverflow.com//25485782/9059865","code":""},{"path":"https://brshallo.github.io/funspotr/reference/github_contents.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Github Contents — github_contents","text":"","code":"github_contents(repo, branch = NULL)"},{"path":"https://brshallo.github.io/funspotr/reference/github_contents.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Github Contents — github_contents","text":"repo Github user/repo branch Default NULL test \"main\" invalid, \"master\".","code":""},{"path":"https://brshallo.github.io/funspotr/reference/github_contents.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Github Contents — github_contents","text":"Character vector contents github repo.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/github_contents.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Github Contents — github_contents","text":"","code":"if (FALSE) { funspotr:::github_contents(\"brshallo/feat-eng-lags-presentation\", branch = \"main\") }"},{"path":"https://brshallo.github.io/funspotr/reference/github_contents_urls.html","id":null,"dir":"Reference","previous_headings":"","what":"Github Contents and URLS — github_contents_urls","title":"Github Contents and URLS — github_contents_urls","text":"Runs funspotr:::github_contents() maps github_rbf_to_url() returning URL's \"raw\" location.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/github_contents_urls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Github Contents and URLS — github_contents_urls","text":"","code":"github_contents_urls(repo, branch = \"main\")"},{"path":"https://brshallo.github.io/funspotr/reference/github_contents_urls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Github Contents and URLS — github_contents_urls","text":"repo Github user/repo branch Default NULL test \"main\" invalid, \"master\".","code":""},{"path":"https://brshallo.github.io/funspotr/reference/github_contents_urls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Github Contents and URLS — github_contents_urls","text":"Dataframe columns relative_paths absolute_paths.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/github_contents_urls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Github Contents and URLS — github_contents_urls","text":"","code":"if (FALSE) { funspotr:::github_contents_urls(\"brshallo/feat-eng-lags-presentation\", branch = \"main\") }"},{"path":"https://brshallo.github.io/funspotr/reference/github_spot_things.html","id":null,"dir":"Reference","previous_headings":"","what":"Spot Packages or Functions from Github Repository — github_spot_pkgs","title":"Spot Packages or Functions from Github Repository — github_spot_pkgs","text":"function deprecated updates API modularized functionality two steps list_files_*() spot_*(). github_spot_pkgs() : Spot packages show-R Rmarkdown documents github repository. Essentially wrapper mapping spot_pkgs() across multiple files. github_spot_funs() : Spot functions corresponding packages show-R Rmarkdown documents github repository. Essentially wrapper mapping spot_pkgs() across multiple files. Meant cases packages scripts file. cases case need build alternative workflow. See unexported functions R/github-spot.R potentially helpful building blocks.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/github_spot_things.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spot Packages or Functions from Github Repository — github_spot_pkgs","text":"","code":"github_spot_pkgs(   repo,   branch = \"main\",   ...,   preview = FALSE,   rmv_index = TRUE,   custom_urls = NULL )  github_spot_funs(   repo,   branch = \"main\",   ...,   preview = FALSE,   rmv_index = TRUE,   custom_urls = NULL )"},{"path":"https://brshallo.github.io/funspotr/reference/github_spot_things.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spot Packages or Functions from Github Repository — github_spot_pkgs","text":"repo Github repository, e.g. \"brshallo/feat-eng-lags-presentation\" branch Branch github repository, default \"main\". ... Arguments passed onto spot_*(). preview Logical, set TRUE return dataframe urls passed spot_funs() spot_pkgs() without parsing files. See README example can combined custom_urls parse subset files identified. rmv_index Logical, repos containing blogdown sites index.R file root. Change FALSE want file removed. custom_urls Option pass dataframe columns contents urls override default urls repo parse. Default NULL. See README example.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/github_spot_things.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spot Packages or Functions from Github Repository — github_spot_pkgs","text":"Dataframe relative_paths absolute_paths file paths along list-column spotted containing purrr::safely() lists \"result\" \"error\" file parsed. See unnest_github_results() helper put easier read format.","code":""},{"path":[]},{"path":"https://brshallo.github.io/funspotr/reference/github_spot_things.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spot Packages or Functions from Github Repository — github_spot_pkgs","text":"","code":"if (FALSE) { library(funspotr)  github_spot_funs(\"brshallo/feat-eng-lags-presentation\", branch = \"main\")  # Say you only want to parse a subset of the R file discovered, you could do # something like: library(dplyr)  github_spot_funs(\"brshallo/feat-eng-lags-presentation\", branch = \"main\", preview = TRUE) %>%   slice(1:2) %>%   github_spot_funs(custom_urls = .) }"},{"path":"https://brshallo.github.io/funspotr/reference/install_missing_pkgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Install missing packages — install_missing_pkgs","title":"Install missing packages — install_missing_pkgs","text":"Attempt install missing packages CRAN.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/install_missing_pkgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install missing packages — install_missing_pkgs","text":"","code":"install_missing_pkgs(pkgs_availability)"},{"path":"https://brshallo.github.io/funspotr/reference/install_missing_pkgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install missing packages — install_missing_pkgs","text":"pkgs_availability Named logical vector names packages -- generally output running check_pkgs_availability().","code":""},{"path":"https://brshallo.github.io/funspotr/reference/install_missing_pkgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install missing packages — install_missing_pkgs","text":"Installs packages cran using remotes::install_cran() available else install.packages()","code":""},{"path":"https://brshallo.github.io/funspotr/reference/install_missing_pkgs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Install missing packages — install_missing_pkgs","text":"cases, probably safer clone use renv::dependencies() -- README.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/install_missing_pkgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install missing packages — install_missing_pkgs","text":"","code":"# should verify pkgs are available on CRAN -- example below wouldn't work # # because madeUpPkg doesn't exist on CRAN if (FALSE) { library(funspotr) library(dplyr)  file_lines <- \" library(dplyr) require(tidyr) library(madeUpPkg)  as_tibble(mpg) %>%   group_by(class) %>%   nest() %>%   mutate(stats = purrr::map(data,                             ~lm(cty ~ hwy, data = .x)))  made_up_fun() \"  file_output <- tempfile(fileext = '.R') writeLines(file_lines, file_output)  spot_pkgs(file_output) %>%   check_pkgs_availability() %>%   funspotr:::install_missing_pkgs() }"},{"path":"https://brshallo.github.io/funspotr/reference/list_files_github_gists.html","id":null,"dir":"Reference","previous_headings":"","what":"List Filepaths of Github Gists — list_files_github_gists","title":"List Filepaths of Github Gists — list_files_github_gists","text":"Given username, return dataframe paths gists user.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/list_files_github_gists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Filepaths of Github Gists — list_files_github_gists","text":"","code":"list_files_github_gists(user, keep_non_r = FALSE)"},{"path":"https://brshallo.github.io/funspotr/reference/list_files_github_gists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Filepaths of Github Gists — list_files_github_gists","text":"user Character string username whose github gists want pull. keep_non_r Logical, default FALSE keeps records relative_path ending \"(r|rmd|rmarkdown)$\". lot .md gists can easily converted .R files, may want set TRUE.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/list_files_github_gists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Filepaths of Github Gists — list_files_github_gists","text":"Dataframe relative_paths absolute_paths file paths. gists exist folder structure relative_paths generally just file name. absolute_paths url raw file. See unnest_github_results() helper put easier read format.","code":""},{"path":[]},{"path":"https://brshallo.github.io/funspotr/reference/list_files_github_gists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Filepaths of Github Gists — list_files_github_gists","text":"","code":"if (FALSE) { library(dplyr) library(funspotr)  # pulling and analyzing my R file github gists gists_urls <- list_files_github_gists(\"brshallo\")  # Will just parse the first 2 files/gists # Note that is easy to hit the API limit if have lots of gists contents <- spot_funs_files(slice(gists_urls, 1:2))  contents %>%   unnest_results() }"},{"path":"https://brshallo.github.io/funspotr/reference/list_files_github_repo.html","id":null,"dir":"Reference","previous_headings":"","what":"List Files Github Repos — list_files_github_repo","title":"List Files Github Repos — list_files_github_repo","text":"Return dataframe containing paths files github repostiory. Generally used prior spot_{funs/pkgs}_files().","code":""},{"path":"https://brshallo.github.io/funspotr/reference/list_files_github_repo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Files Github Repos — list_files_github_repo","text":"","code":"list_files_github_repo(repo, branch, rmv_index = TRUE, keep_non_r = FALSE)"},{"path":"https://brshallo.github.io/funspotr/reference/list_files_github_repo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Files Github Repos — list_files_github_repo","text":"repo Github repository, e.g. \"brshallo/feat-eng-lags-presentation\" branch Branch github repository, default \"main\". rmv_index Logical, repos containing blogdown sites index.R file root. Change FALSE want file removed. keep_non_r Logical, default FALSE keeps records relative_path ending \"(r|rmd|rmarkdown)$\".","code":""},{"path":"https://brshallo.github.io/funspotr/reference/list_files_github_repo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Files Github Repos — list_files_github_repo","text":"Dataframe columns relative_paths absolute_paths file path locations. absolute_paths urls raw files.","code":""},{"path":[]},{"path":"https://brshallo.github.io/funspotr/reference/list_files_github_repo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Files Github Repos — list_files_github_repo","text":"","code":"if (FALSE) { library(dplyr) library(funspotr)  # pulling and analyzing my R file github gists gh_urls <- list_files_github_repo(\"brshallo/feat-eng-lags-presentation\", branch = \"main\")  # Will just parse the first 2 files/gists contents <- spot_funs_files(slice(gh_urls, 1:2))  contents %>%   unnest_results() }"},{"path":"https://brshallo.github.io/funspotr/reference/list_files_wd.html","id":null,"dir":"Reference","previous_headings":"","what":"List Files working directory — list_files_wd","title":"List Files working directory — list_files_wd","text":"Return dataframe containing paths files working directory. Generally used prior spot_{funs/pkgs}_files().","code":""},{"path":"https://brshallo.github.io/funspotr/reference/list_files_wd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Files working directory — list_files_wd","text":"","code":"list_files_wd(path = \".\", keep_non_r = FALSE)"},{"path":"https://brshallo.github.io/funspotr/reference/list_files_wd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Files working directory — list_files_wd","text":"path Character vector path. Default \".\" set starting location relative_paths. keep_non_r Logical, default FALSE keeps records relative_paths ending \"(r|rmd|rmarkdown)$\".","code":""},{"path":"https://brshallo.github.io/funspotr/reference/list_files_wd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Files working directory — list_files_wd","text":"Dataframe columns relative_paths absolute_paths.","code":""},{"path":[]},{"path":"https://brshallo.github.io/funspotr/reference/list_files_wd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Files working directory — list_files_wd","text":"","code":"if (FALSE) { library(dplyr) library(funspotr)  # pulling and analyzing my R file github gists files_local <- list_files_wd()  # Will just parse the first 2 files/gists contents <- spot_funs_files(slice(files_local, 1:2))  contents %>%   unnest_results() }"},{"path":"https://brshallo.github.io/funspotr/reference/list_functions_in_file.html","id":null,"dir":"Reference","previous_headings":"","what":"List Functions in File — list_functions_in_file","title":"List Functions in File — list_functions_in_file","text":"Simply wrapper utils::getParseData() . mostly copied : NCmisc::list.functions..file(). Rewrote function made order output dependent packages. Also wanted add show_each_use argugment.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/list_functions_in_file.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Functions in File — list_functions_in_file","text":"","code":"list_functions_in_file(file_path, show_each_use = FALSE)"},{"path":"https://brshallo.github.io/funspotr/reference/list_functions_in_file.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Functions in File — list_functions_in_file","text":"file_path character vector path file. show_each_use changed TRUE return instance function used rather everything","code":""},{"path":"https://brshallo.github.io/funspotr/reference/list_functions_in_file_to_df.html","id":null,"dir":"Reference","previous_headings":"","what":"List Functions in File to Dataframe — list_functions_in_file_to_df","title":"List Functions in File to Dataframe — list_functions_in_file_to_df","text":"helper function converts output funspotr:::list_functions_in_file() tibble cleans-things. ' list_functions_in_file_to_df() last step inside spot_funs() -- check documentation returned output.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/list_functions_in_file_to_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Functions in File to Dataframe — list_functions_in_file_to_df","text":"","code":"list_functions_in_file_to_df(funs, keep_search_list = FALSE)"},{"path":"https://brshallo.github.io/funspotr/reference/list_functions_in_file_to_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Functions in File to Dataframe — list_functions_in_file_to_df","text":"funs List output returned running funspotr:::list_functions_in_file() keep_search_list Logical, default FALSE change TRUE include entire search list list-column.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/list_functions_in_file_to_df.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List Functions in File to Dataframe — list_functions_in_file_to_df","text":"Note map_chr(pkgs, 1) step end means keeps version function top fabricated search list. perfect however. also nothing reexported functions etc. (e.g. as_tibble() home tibble reexported dplyr tidyr -- meaningless spot_funs() though just looking top search space via utils::find())","code":""},{"path":"https://brshallo.github.io/funspotr/reference/network_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Funspotr Network Plot — network_plot","title":"Funspotr Network Plot — network_plot","text":"Output simple network plot using visNetwork connecting either funs pkgs relative_paths/absolute_paths.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/network_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Funspotr Network Plot — network_plot","text":"","code":"network_plot(df, to = .data$pkgs, show_each_use = FALSE)"},{"path":"https://brshallo.github.io/funspotr/reference/network_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Funspotr Network Plot — network_plot","text":"df Dataframe containing columns relative_paths, absolute_paths either funs pkgs. Generally output running: github_spot_*() %>% unnest_github_results() funs pkgs show_each_use Binary, default FALSE. TRUE edge thickness based number times package function used.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/network_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Funspotr Network Plot — network_plot","text":"visNetwork plot","code":""},{"path":"https://brshallo.github.io/funspotr/reference/network_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Funspotr Network Plot — network_plot","text":"","code":"if (FALSE) { library(dplyr) library(funspotr)  gh_ex_pkgs <- list_files_github_repo(   repo = \"brshallo/feat-eng-lags-presentation\",   branch = \"main\") %>%   spot_funs_files()  gh_ex_pkgs %>%   unnest_results() %>%   network_plot(to = pkgs) }"},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs.html","id":null,"dir":"Reference","previous_headings":"","what":"Spot Functions — spot_funs","title":"Spot Functions — spot_funs","text":"Given file_path extract functions associated packages specified file.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spot Functions — spot_funs","text":"","code":"spot_funs(file_path, ...)"},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spot Functions — spot_funs","text":"file_path character vector path file. ... allows pass additional arguments spot_funs_custom().","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spot Functions — spot_funs","text":"Given default arguments missing packages, dataframe following columns returned: funs: specifying functions file. pkgs: package function came . funs custom function came package installed machine, pkgs return \"(unknown)\". Note unused loaded packages / pkgs dropped output. functions without available package returned value \"(unknown)\". See README documentation.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spot Functions — spot_funs","text":"spot_funs() uses spot_funs_custom() run -- less verbose version require passing packages separately. See README ?spot_funs_custom details function works arguments can passed (via ...). code syntax malformed properly parsed, function error.","code":""},{"path":[]},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spot Functions — spot_funs","text":"","code":"library(funspotr)  file_lines <- \" library(dplyr) require(tidyr) library(madeUpPkg)  as_tibble(mpg) %>%   group_by(class) %>%   nest() %>%   mutate(stats = purrr::map(data,                             ~lm(cty ~ hwy, data = .x)))  made_up_fun() \"  file_output <- tempfile(fileext = \".R\") writeLines(file_lines, file_output)  spot_funs(file_output) #> # A tibble: 9 × 2 #>   funs        pkgs      #>   <chr>       <chr>     #> 1 library     base      #> 2 require     base      #> 3 as_tibble   tidyr     #> 4 group_by    dplyr     #> 5 nest        tidyr     #> 6 mutate      dplyr     #> 7 map         purrr     #> 8 lm          stats     #> 9 made_up_fun (unknown)"},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs_custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Spot Functions Custom — spot_funs_custom","title":"Spot Functions Custom — spot_funs_custom","text":"Engine runs spot_funs(). spot_funs_custom() options changing returned output producing print statements errors. also requires provide character vector pkgs rather identifying automatically via spot_pkgs().","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs_custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spot Functions Custom — spot_funs_custom","text":"","code":"spot_funs_custom(   pkgs,   file_path,   show_each_use = FALSE,   keep_search_list = FALSE,   copy_local = TRUE,   print_pkgs_load_status = FALSE,   error_if_missing_pkg = FALSE,   keep_in_multiple_pkgs = FALSE )"},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs_custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spot Functions Custom — spot_funs_custom","text":"pkgs Character vector packages added search space via require() import::() can found utils::find(). Generally returned value spot_pkgs(file_path, show_explicit_funs = TRUE). file_path character vector path file. show_each_use Logical, default FALSE. changed TRUE return individual rows time function used (rather just entire file). keep_search_list Logical, default FALSE. changed TRUE include entire search list function. May helpful debugging cases funspotr may good job recreating search list identifying packages function(s) came . print packages search list function. copy_local Logical, changed FALSE copy local temporary folder prior analysis. Many functions require file already .R file file exist locally. generally set TRUE unless hold. print_pkgs_load_status Logical, default FALSE. set TRUE print named vector logicals showing whether packages machine along warning messages come running require(). continue produce output function. error_if_missing_pkg Logical, default FALSE. set TRUE print_pkgs_load_status = TRUE automatically. package installed machine print load status individual pkgs result error. keep_in_multiple_pkgs Logical, default FALSE. set TRUE include outputted dataframe column in_multiple_pkgs: logical, whether function exists multiple packages loaded (.e. search space utils::find().","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs_custom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spot Functions Custom — spot_funs_custom","text":"Given default arguments missing packages, dataframe following columns returned: funs: specifying functions file. pkgs: package function came . funs custom function came package installed machine, pkgs return \"(unknown)\". Note unused loaded packages / pkgs dropped output. functions without available package returned value \"(unknown)\". See README documentation.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs_custom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spot Functions Custom — spot_funs_custom","text":"spot_funs_custom() use cases trust spot_pkgs() properly identify package dependencies within file instead want pass character vector packages. WORKS: See README package included pkgs, functions called come package assigned value \"(unknown)\" pkgs column returned output. can also use print_pkgs_load_status error_if_missing_pkg arguments alter output works cases packages machine. Explicit calls unexported functions .e. pkg:::fun() pkgs = \"(unknown)\" returned dataframe.","code":""},{"path":[]},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs_custom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spot Functions Custom — spot_funs_custom","text":"","code":"library(funspotr)  file_lines <- \" library(dplyr) require(tidyr) library(madeUpPkg)  as_tibble(mpg) %>%   group_by(class) %>%   nest() %>%   mutate(stats = purrr::map(data,                             ~lm(cty ~ hwy, data = .x)))  made_up_fun() \"  file_output <- tempfile(fileext = \".R\") writeLines(file_lines, file_output)  pkgs <- spot_pkgs(file_output)  spot_funs_custom(pkgs, file_output) #> # A tibble: 9 × 2 #>   funs        pkgs      #>   <chr>       <chr>     #> 1 library     base      #> 2 require     base      #> 3 as_tibble   tidyr     #> 4 group_by    dplyr     #> 5 nest        tidyr     #> 6 mutate      dplyr     #> 7 map         purrr     #> 8 lm          stats     #> 9 made_up_fun (unknown)  # If you'd rather it error when a pkg doesn't exist (e.g. {madeUpPkg}) # You could run: # spot_funs_custom(pkgs, file_output, error_if_missing_pkg = TRUE)"},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Spot packages loaded or used in file — spot_pkgs","title":"Spot packages loaded or used in file — spot_pkgs","text":"Extract pkg called either library(pkg), require(pkg) requireNamespace(\"pkg\") pkg::fun(). identify packages loaded ways typically done interactive R scripts (e.g. relying DESCRIPTION file pkg something like source(\"lib-calls.R\")). Inspiration: https://github.com/rstudio/blogdown/issues/647","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spot packages loaded or used in file — spot_pkgs","text":"","code":"spot_pkgs(   file_path,   show_explicit_funs = FALSE,   copy_local = TRUE,   as_yaml_tags = FALSE )"},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spot packages loaded or used in file — spot_pkgs","text":"file_path String path file interest. show_explicit_funs cases function called explicitly, show package dependency function together. example script containing dplyr::select() (opposed library(dplyr); select()) spot_pkgs(show_explicit_funs = TRUE) return item \"dplyr::select\" rather just \"dplyr\") copy_local Logical, changed FALSE copy local temporary folder prior analysis. Many processes require file already .R file file exist locally, hence usually set TRUE unless known case. as_yaml_tags Logical, default FALSE. set TRUE flattens puts format convenient pasting \"tags\" section blogdown post Rmd document.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spot packages loaded or used in file — spot_pkgs","text":"Character vector packages loaded file (cases show_explicit_funs = TRUE explicit calls package, \"pkg:fun\").","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spot packages loaded or used in file — spot_pkgs","text":"Packages extracted solely based text -- whether package actually exists . Hence even packages installed machine show-script returned character vector.","code":""},{"path":[]},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spot packages loaded or used in file — spot_pkgs","text":"","code":"library(funspotr)  file_lines <- \" library(dplyr) require(tidyr) library(madeUpPkg)  as_tibble(mpg) %>%   group_by(class) %>%   nest() %>%   mutate(stats = purrr::map(data,                             ~lm(cty ~ hwy, data = .x)))  made_up_fun() \"  file_output <- tempfile(fileext = \".R\") writeLines(file_lines, file_output)  spot_pkgs(file_output) #> [1] \"dplyr\"     \"tidyr\"     \"madeUpPkg\" \"purrr\"      # To view `purrr::map` as an explicit call spot_pkgs(file_output, show_explicit_funs = TRUE) #> [1] \"dplyr\"      \"tidyr\"      \"madeUpPkg\"  \"purrr::map\"  # To output for blogdown post YAML header tags cat(spot_pkgs(file_output, as_yaml_tags = TRUE)) #>   - dplyr #>   - tidyr #>   - madeUpPkg #>   - purrr"},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs_from_DESCRIPTION.html","id":null,"dir":"Reference","previous_headings":"","what":"Spot package dependencies from DESCRIPTION file — spot_pkgs_from_description","title":"Spot package dependencies from DESCRIPTION file — spot_pkgs_from_description","text":"Given explicit path DESCRIPTION file return package dependencies therein. inspiration: https://stackoverflow.com//30225680/9059865","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs_from_DESCRIPTION.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spot package dependencies from DESCRIPTION file — spot_pkgs_from_description","text":"","code":"spot_pkgs_from_description(DESCRIPTION_path)"},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs_from_DESCRIPTION.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spot package dependencies from DESCRIPTION file — spot_pkgs_from_description","text":"DESCRIPTION_path Path DESCRIPTION file","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs_from_DESCRIPTION.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spot package dependencies from DESCRIPTION file — spot_pkgs_from_description","text":"Character vector packages.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs_from_DESCRIPTION.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spot package dependencies from DESCRIPTION file — spot_pkgs_from_description","text":"","code":"funspotr:::spot_pkgs_from_description(   \"https://raw.githubusercontent.com/brshallo/animatrixr/master/DESCRIPTION\" ) #> [1] \"dplyr\"      \"purrr\"      \"ggplot2\"    \"gganimate\"  \"knitr\"      #> [6] \"rmarkdown\"  \"datasauRus\""},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs_used.html","id":null,"dir":"Reference","previous_headings":"","what":"Spot Packages Used — spot_pkgs_used","title":"Spot Packages Used — spot_pkgs_used","text":"Primarily used cases load metapackages like tidyverse tidymodels want return packages actually used. E.g. say library(tidyverse) call end-using functions dplyr -- spot_pkgs() return \"tidyverse\" spot_pkgs_used() return \"dplyr\".","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs_used.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spot Packages Used — spot_pkgs_used","text":"","code":"spot_pkgs_used(file_path, as_yaml_tags = FALSE)"},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs_used.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spot Packages Used — spot_pkgs_used","text":"file_path String path file interest. as_yaml_tags Logical, default FALSE. set TRUE flattens puts format convenient pasting \"tags\" section blogdown post Rmd document.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs_used.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spot Packages Used — spot_pkgs_used","text":"Character vector packages functions used file.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs_used.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spot Packages Used — spot_pkgs_used","text":"essentially just calling spot_funs() %>% (unique(pkgs)) background. many options spot_pkgs() though.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"Spot Tags — spot_tags","title":"Spot Tags — spot_tags","text":"Put function blogdown post's YAML header packages packages used post (wrapper around funspotr::spot_pkgs()).","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spot Tags — spot_tags","text":"","code":"spot_tags(   file_path = knitr::current_input(),   used = FALSE,   drop_knitr = FALSE,   yaml_bullet = NULL,   ... )"},{"path":"https://brshallo.github.io/funspotr/reference/spot_tags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spot Tags — spot_tags","text":"file_path Default file knitted can change file (e.g. cases code post may reside different file). used Default FALSE. TRUE pass show_pkgs_used() rather show_pkgs(). (Mainly useful showing actual packages used rather meta-packages called like tidyverse tidymodels. Also uses strict parsing method, commented-packages example show-.). drop_knitr Many blogdown posts knitr::opts_chunk$set() may want tag showing-. Default keep , set FALSE drop \"knitr\" tagged. better approach may just skip \"setup\" chunk parsing... yaml_bullet Default NULL meaning file_path read-correct format guessed based \"spot_tags\" appearance either hyphen bracket (corresponding bulleted array format YAML header). See examples hard-code. first occurrence happens line contains bracket value becomes FALSE else becomes TRUE. set NULL \"spot_tags\" detected file_path default FALSE. yaml_bullet can also specified directly either TRUE FALSE. TRUE entails spot_tags() set YAML bullet, FALSE indicates user inputting array (see examples ). ... additional arguments pass spot_pkgs*().","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_tags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spot Tags — spot_tags","text":"String format meant inserted tags argument YAML header.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_tags.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spot Tags — spot_tags","text":"Note must wrap double quotes. Thanks Yihui getting working suggesting function! Note requires blogdown >= 1.9 work (https://github.com/rstudio/blogdown/issues/647).","code":"tags: [\"`r funspotr::spot_tags()`\"]"},{"path":[]},{"path":"https://brshallo.github.io/funspotr/reference/spot_tags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spot Tags — spot_tags","text":"","code":"## Put this in your blogdown posts YAML header to autogenerate tags based on pkgs # tags: #   - \"`r funspotr::spot_tags()`\"  ## Can also put this in an array format in your YAML header # tags: [\"`r funspotr::spot_tags()`\"]  ## To review input interactively from within rstudio you might also try: # funspotr::spot_tags(rstudioapi::getSourceEditorContext()$path)"},{"path":"https://brshallo.github.io/funspotr/reference/spot_things_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Spot Packages or Functions in File Paths — spot_funs_files","title":"Spot Packages or Functions in File Paths — spot_funs_files","text":"spot_pkgs_files() : Spot packages show-R Rmarkdown documents dataframe filepaths.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_things_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spot Packages or Functions in File Paths — spot_funs_files","text":"","code":"spot_funs_files(df, ...)  spot_pkgs_files(df, ...)"},{"path":"https://brshallo.github.io/funspotr/reference/spot_things_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spot Packages or Functions in File Paths — spot_funs_files","text":"df Dataframe containing column absolute_paths. ... Arguments passed onto spot_{pkgs|funs}().","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_things_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spot Packages or Functions in File Paths — spot_funs_files","text":"Dataframe relative_paths absolute_paths file paths along list-column spotted containing purrr::safely() lists \"result\" \"error\" file parsed. Use unnest_results() unnest \"result\" values.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_things_files.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spot Packages or Functions in File Paths — spot_funs_files","text":"spot_funs_files() : Spot functions corresponding packages show-R Rmarkdown documents dataframe filepaths. purrr::safely() wrapper mapping spot_pkgs() spot_funs() across multiple filepaths. Defaults meant files package libraries referenced within files .","code":""},{"path":[]},{"path":"https://brshallo.github.io/funspotr/reference/spot_things_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spot Packages or Functions in File Paths — spot_funs_files","text":"","code":"if (FALSE) { library(funspotr) library(dplyr)  list_files_github_repos(\"brshallo/feat-eng-lags-presentation\", branch = \"main\", preview = TRUE) %>%   spot_funs_files() }"},{"path":"https://brshallo.github.io/funspotr/reference/str_detect_r_rmd.html","id":null,"dir":"Reference","previous_headings":"","what":"String Detect R or Rmarkdown File endings — str_detect_r_rmd","title":"String Detect R or Rmarkdown File endings — str_detect_r_rmd","text":"Return TRUE R Rmarkdown files, else FALSE.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/str_detect_r_rmd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"String Detect R or Rmarkdown File endings — str_detect_r_rmd","text":"","code":"str_detect_r_rmd(contents, rmv_index = TRUE)"},{"path":"https://brshallo.github.io/funspotr/reference/str_detect_r_rmd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"String Detect R or Rmarkdown File endings — str_detect_r_rmd","text":"contents Character vector file path. rmv_index Logical, default TRUE, repos containing blogdown sites index.R file root. Change FALSE want file removed.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/str_detect_r_rmd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String Detect R or Rmarkdown File endings — str_detect_r_rmd","text":"Logical vector.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/str_detect_r_rmd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"String Detect R or Rmarkdown File endings — str_detect_r_rmd","text":"","code":"files <- c(\"file1.R\", \"file2.Rmd\", \"file3.Rmarkdown\", \"file4.Rproj\") funspotr:::str_detect_r_rmd(files) #> [1]  TRUE  TRUE  TRUE FALSE"},{"path":"https://brshallo.github.io/funspotr/reference/unnest_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Unnest Results — unnest_results","title":"Unnest Results — unnest_results","text":"Run running list_files_*() |> spot_{funs|pkgs}_files() unnest spotted list-column.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/unnest_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unnest Results — unnest_results","text":"","code":"unnest_results(df)"},{"path":"https://brshallo.github.io/funspotr/reference/unnest_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unnest Results — unnest_results","text":"df Dataframe outputted spot_{funs|pkgs}_files() contains spotted list-column.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/unnest_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unnest Results — unnest_results","text":"unnested dataframe spotted moved front.","code":""},{"path":[]},{"path":"https://brshallo.github.io/funspotr/reference/unnest_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unnest Results — unnest_results","text":"","code":"if (FALSE) { library(funspotr) library(dplyr)  list_files_github_repo(\"brshallo/feat-eng-lags-presentation\", branch = \"main\") %>%   spot_funs_files() %>%   unnest_results() }"},{"path":"https://brshallo.github.io/funspotr/news/index.html","id":"funspotr-001","dir":"Changelog","previous_headings":"","what":"funspotr 0.0.1","title":"funspotr 0.0.1","text":"Initial release","code":""}]
