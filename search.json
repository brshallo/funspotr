[{"path":"https://brshallo.github.io/funspotr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 funspotr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://brshallo.github.io/funspotr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Bryan Shalloway. Author, maintainer.","code":""},{"path":"https://brshallo.github.io/funspotr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Shalloway B (2023). funspotr: Spot R Functions & Packages. R package version 0.0.3.9000, https://brshallo.github.io/funspotr/.","code":"@Manual{,   title = {funspotr: Spot R Functions & Packages},   author = {Bryan Shalloway},   year = {2023},   note = {R package version 0.0.3.9000},   url = {https://brshallo.github.io/funspotr/}, }"},{"path":"https://brshallo.github.io/funspotr/index.html","id":"funspotr-","dir":"","previous_headings":"","what":"Spot R Functions & Packages","title":"Spot R Functions & Packages","text":"Installation Talks posts Examples funspotr built reference tables Spot functions file Previewing customizing files parse Files didn’t write Package dependencies another file Show function calls Helper blog tags spot_funs() works Limitations, problems, musings goal funspotr (R function spotter) make easy identify R functions packages used files projects. initially written create reference tables functions packages used popular github repositories1. roughly three types functions funspotr: list_files_*(): identify files repository related location spot_*(): identify functions packages files helpers manipulate plot outputs functions funspotr set-parsing R, Rmarkdown Quarto files. want parse Jupyter notebook first convert appropriate file type. pass file type recognized (e.g. .txt file) funspotr attempt parse .R script. funspotr primarily designed identifying functions / packages self-contained files collections self-contained files (e.g. blogdown project2). Though see Package dependencies another file examples using contexts.","code":""},{"path":"https://brshallo.github.io/funspotr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Spot R Functions & Packages","text":"Install latest stable version funspotr CRAN : can install development version funspotr GitHub :","code":"install.packages(\"funspotr\") # install.packages(\"devtools\") devtools::install_github(\"brshallo/funspotr\")"},{"path":"https://brshallo.github.io/funspotr/index.html","id":"talks-and-posts","dir":"","previous_headings":"","what":"Talks and posts","title":"Spot R Functions & Packages","text":"slides presentation Rstudio Conf 2022 summarizing projects setting tags, uses parsing R files Part 1 3 series Identifying R functions packages…","code":""},{"path":"https://brshallo.github.io/funspotr/index.html","id":"examples-of-funspotr-built-reference-tables","dir":"","previous_headings":"","what":"Examples of funspotr built reference tables","title":"Spot R Functions & Packages","text":"funspotr can used create reference tables functions packages used R projects. Julia Silge blog David Robinson screencasts R Data Science book Bryan Shalloway blog brshallo gists","code":""},{"path":"https://brshallo.github.io/funspotr/index.html","id":"spot-functions-in-a-file","dir":"","previous_headings":"","what":"Spot functions in a file","title":"Spot R Functions & Packages","text":"primary function funspotr spot_funs() returns dataframe showing functions associated packages used file. funs: functions file pkgs: best guess package functions came …3","code":"library(funspotr)  file_lines <- \" library(dplyr) require(tidyr)  as_tibble(mpg) %>%    mutate(class = as.character(class)) %>%   group_by(class) %>%   nest() %>%   mutate(stats = purrr::map(data,                             ~lm(cty ~ hwy, data = .x)))   made_up_fun() \"  file_output <- tempfile(fileext = \".R\") writeLines(file_lines, file_output)  spot_funs(file_path = file_output) #> # A tibble: 10 × 2 #>    funs         pkgs      #>    <chr>        <chr>     #>  1 library      base      #>  2 require      base      #>  3 as_tibble    tidyr     #>  4 mutate       dplyr     #>  5 as.character base      #>  6 group_by     dplyr     #>  7 nest         tidyr     #>  8 map          purrr     #>  9 lm           stats     #> 10 made_up_fun  (unknown)"},{"path":"https://brshallo.github.io/funspotr/index.html","id":"spot-functions-on-all-files-in-a-project","dir":"","previous_headings":"","what":"Spot functions on all files in a project","title":"Spot R Functions & Packages","text":"funspotr list_files_*() functions return dataframe relative_paths absolute_paths R, Rmarkdown, quarto files specified location (currently: github repo, gists, local). can combined variant spot_funs() maps function across file path found, spot_funs_files(): relative_paths : relative filepath absolute_paths: absolute filepath (case URL raw file github) spotted: purrr::safely() style list-column results4 mapping spot_funs() across absolute_paths. results may unnested helper funspotr::unnest_results() provide table functions packages filepath. can manipulated like dataframe – say want filter files , readr rsample packages used. outputs funspotr::unnest_results() can also passed funspotr::network_plot() build network visualization connections functions/packages files5.","code":"library(dplyr)  # repo for an old presentation I gave gh_ex <- list_files_github_repo(   repo = \"brshallo/feat-eng-lags-presentation\",    branch = \"main\") %>%    spot_funs_files()  gh_ex #> # A tibble: 4 × 3 #>   relative_paths                absolute_paths                      spotted      #>   <chr>                         <chr>                               <list>       #> 1 R/Rmd-to-R.R                  https://raw.githubusercontent.com/… <named list> #> 2 R/feat-engineering-lags.R     https://raw.githubusercontent.com/… <named list> #> 3 R/load-inspections-save-csv.R https://raw.githubusercontent.com/… <named list> #> 4 R/types-of-splits.R           https://raw.githubusercontent.com/… <named list> gh_ex %>%    unnest_results() %>%    filter(pkgs %in% c(\"here\", \"readr\", \"rsample\")) #> # A tibble: 8 × 4 #>   funs               pkgs    relative_paths                absolute_paths        #>   <chr>              <chr>   <chr>                         <chr>                 #> 1 here               here    R/Rmd-to-R.R                  https://raw.githubus… #> 2 read_csv           readr   R/feat-engineering-lags.R     https://raw.githubus… #> 3 initial_time_split rsample R/feat-engineering-lags.R     https://raw.githubus… #> 4 training           rsample R/feat-engineering-lags.R     https://raw.githubus… #> 5 testing            rsample R/feat-engineering-lags.R     https://raw.githubus… #> 6 sliding_period     rsample R/feat-engineering-lags.R     https://raw.githubus… #> 7 write_csv          readr   R/load-inspections-save-csv.R https://raw.githubus… #> 8 here               here    R/load-inspections-save-csv.R https://raw.githubus…"},{"path":"https://brshallo.github.io/funspotr/index.html","id":"previewing-and-customizing-files-to-parse","dir":"","previous_headings":"Spot functions on all files in a project","what":"Previewing and customizing files to parse","title":"Spot R Functions & Packages","text":"might want parse certain file types subset files repo. Say want parse “types--splits.R” “Rmd--R.R” files. Note lot files repo may need set-sleep periods clone repo locally parse files stay within limits github API hits.","code":"preview_files <- list_files_github_repo(   repo = \"brshallo/feat-eng-lags-presentation\",    branch = \"main\")  preview_files #> # A tibble: 4 × 2 #>   relative_paths                absolute_paths                                   #>   <chr>                         <chr>                                            #> 1 R/Rmd-to-R.R                  https://raw.githubusercontent.com/brshallo/feat… #> 2 R/feat-engineering-lags.R     https://raw.githubusercontent.com/brshallo/feat… #> 3 R/load-inspections-save-csv.R https://raw.githubusercontent.com/brshallo/feat… #> 4 R/types-of-splits.R           https://raw.githubusercontent.com/brshallo/feat… preview_files %>%    filter(stringr::str_detect(relative_paths, \"types-of-splits|Rmd-to-R\")) %>%    spot_funs_files() %>%    unnest_results() #> # A tibble: 24 × 4 #>    funs      pkgs      relative_paths      absolute_paths                        #>    <chr>     <chr>     <chr>               <chr>                                 #>  1 purl      knitr     R/Rmd-to-R.R        https://raw.githubusercontent.com/br… #>  2 here      here      R/Rmd-to-R.R        https://raw.githubusercontent.com/br… #>  3 library   base      R/types-of-splits.R https://raw.githubusercontent.com/br… #>  4 theme_set ggplot    R/types-of-splits.R https://raw.githubusercontent.com/br… #>  5 theme_bw  ggplot    R/types-of-splits.R https://raw.githubusercontent.com/br… #>  6 set.seed  base      R/types-of-splits.R https://raw.githubusercontent.com/br… #>  7 tibble    dplyr     R/types-of-splits.R https://raw.githubusercontent.com/br… #>  8 rep       base      R/types-of-splits.R https://raw.githubusercontent.com/br… #>  9 today     lubridate R/types-of-splits.R https://raw.githubusercontent.com/br… #> 10 days      lubridate R/types-of-splits.R https://raw.githubusercontent.com/br… #> # ℹ 14 more rows"},{"path":[]},{"path":"https://brshallo.github.io/funspotr/index.html","id":"files-you-didnt-write","dir":"","previous_headings":"Other things","what":"Files you didn’t write","title":"Spot R Functions & Packages","text":"Functions created file well functions unavailable packages (packages don’t exist) output pkgs = \"(unknown)\". spot package function must package installed locally. Hence files others’ github repos created different machine, good idea start funspotr::check_pkgs_availability() see packages missing install missing packages locally. don’t want edit global library may want use renv environment management tools. funspotr internal helper funspotr::install_missing_pkgs() installing missing packages: Alternatively, may want clone repository locally use renv::dependencies() start using funspotr6.","code":"file_lines_missing_pkgs <- \" library(dplyr)  as_tibble(mpg)  hello_world <- function() print('hello world')  madeuppkg::made_up_fun()  hello_world() \"  missing_pkgs_ex <- tempfile(fileext = \".R\") writeLines(file_lines_missing_pkgs, missing_pkgs_ex)  spot_funs(file_path = missing_pkgs_ex) #> # A tibble: 5 × 2 #>   funs        pkgs      #>   <chr>       <chr>     #> 1 library     base      #> 2 as_tibble   dplyr     #> 3 print       base      #> 4 made_up_fun (unknown) #> 5 hello_world (unknown) spot_pkgs(file_output) %>%   check_pkgs_availability() %>%   funspotr::install_missing_pkgs()"},{"path":"https://brshallo.github.io/funspotr/index.html","id":"package-dependencies-in-another-file","dir":"","previous_headings":"Other things","what":"Package dependencies in another file","title":"Spot R Functions & Packages","text":"spot_funs() currently set-self-contained files. spot_funs_custom() allows user explicitly specify pkgs functions may come . useful cases packages loaded location file_path (e.g. loaded via source(), DESCRIPTION file, workflow). example, made-example library() calls made separate file source()’d . Also see funspotr::spot_pkgs_from_description().","code":"# file where packages are loaded file_libs <- \"library(dplyr) library(lubridate)\"  file_libs_output <- tempfile(fileext = \".R\") writeLines(file_libs, file_libs_output)  # File of interest where things happen file_run <- glue::glue( \"source('{ file_libs_output }')    tibble::tibble(days_from_today = 0:10) %>%      mutate(date = today() + days(days_from_today)) \",  file_libs_output = stringr::str_replace_all(file_libs_output, \"\\\\\\\\\", \"/\") )  file_run_output <- tempfile(fileext = \".R\") writeLines(file_run, file_run_output)  # Identify packages using both files and then pass in explicitly to `spot_funs_custom()` pkgs <- c(spot_pkgs(file_libs_output),            spot_pkgs(file_run_output, show_explicit_funs = TRUE))  spot_funs_custom(   pkgs = pkgs,   file_path = file_run_output) #> # A tibble: 5 × 2 #>   funs   pkgs      #>   <chr>  <chr>     #> 1 source base      #> 2 tibble tibble    #> 3 mutate dplyr     #> 4 today  lubridate #> 5 days   lubridate"},{"path":"https://brshallo.github.io/funspotr/index.html","id":"show-all-function-calls","dir":"","previous_headings":"Other things","what":"Show all function calls","title":"Spot R Functions & Packages","text":"Passing show_each_use = TRUE ... spot_funs() spot_funs_files() return instances function call rather just file. Compared initial example, mutate() now shows-rows 4 8:","code":"spot_funs(file_path = file_output, show_each_use = TRUE) #> # A tibble: 11 × 2 #>    funs         pkgs      #>    <chr>        <chr>     #>  1 library      base      #>  2 require      base      #>  3 as_tibble    tidyr     #>  4 mutate       dplyr     #>  5 as.character base      #>  6 group_by     dplyr     #>  7 nest         tidyr     #>  8 mutate       dplyr     #>  9 map          purrr     #> 10 lm           stats     #> 11 made_up_fun  (unknown)"},{"path":"https://brshallo.github.io/funspotr/index.html","id":"helper-for-blog-tags","dir":"","previous_headings":"Other things","what":"Helper for blog tags","title":"Spot R Functions & Packages","text":"automatically packages used tags blog post can add inline function funspotr::spot_tags() bullet tags categories argument YAML header. example:","code":"--- title: This is a post author: brshallo date: '2022-02-11' tags: [\"`r funspotr::spot_tags()`\"] slug: this-is-a-post ---"},{"path":"https://brshallo.github.io/funspotr/index.html","id":"how-spot_funs-works","dir":"","previous_headings":"","what":"How spot_funs() works","title":"Spot R Functions & Packages","text":"funspotr mimics search space file prior identifying pkgs/funs. high-level… Create new R instance using callr clean-specified file using formatR Load packages. Explicit calls (e.g. pkg::fun()) loaded individually via import loaded last (putting top search space)7. (steps 1 2 needed step 4 best chance identifying package function comes file.) Pass file utils::getParseData() filter just functions Pass functions utils::find() identify associated package Explainer slide Rstudio Conf 2022 presentation:","code":""},{"path":"https://brshallo.github.io/funspotr/index.html","id":"limitations-problems-musings","dir":"","previous_headings":"","what":"Limitations, problems, musings","title":"Spot R Functions & Packages","text":"funspotr specific R. try pass file different language get parsing error code commented out8. steps taken funspotr also needed many programming languages9. funspotr work perfectly identifying functions packages. One common example identify functions passed arguments. example identify mean example: lapply(x, mean) . Similarly identify functions within switch(). See #13. file contains R syntax well defined parsed return error. See formatR#-notes (used funspotr parsing) common reasons failure. knitr::read_chunk() knitr::purl() file passed funspotr also frequently cause error parsing. See knitr#1753 & knitr#1938 Please open issue find cases parsing breaks :-) . mentioned elsewhere, default parsing spot_funs() primarily cases package dependencies loaded file used in10. Scripts self-contained typically pkgs argument provided explicitly via spot_funs_custom(). funspotr pay attention functions reexported elsewhere. example, many tibble functions reexported dplyr tidyr – funspotr though know “true” home functions simply looking top search space11. Feel free open issue ’d interested simplifying function vignette mapping spot_funs() folder structures yet mentioned. may something learned R CMD check function parsing. funspotr’s current approach comparatively slow uses imperfect heuristics. identify infix operators, e.g. + funspotr lots dependencies. may make sense move non-core functionality separate package (e.g. stuff concerning list_files*()) Rather running list_files_github_repo() may make sense instead clone repo locally run list_files_wd() repo prior running spot_funs_files() limit number API hits github. Currently ’s possible github block pretty soon due hitting many files (case ’ll likely get 403 connection error). things done reduce number github API hits (e.g. bullet, using Sys.sleep(), …). Throughout code package documentation “inspiration” bullets followed link pointing places took stuff stack overflow, github, packages. Also see footnotes README.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/check_pkgs_availability.html","id":null,"dir":"Reference","previous_headings":"","what":"Check Packages Availability — check_pkgs_availability","title":"Check Packages Availability — check_pkgs_availability","text":"Check whether packages available current library.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/check_pkgs_availability.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check Packages Availability — check_pkgs_availability","text":"","code":"check_pkgs_availability(pkgs, quietly = TRUE)"},{"path":"https://brshallo.github.io/funspotr/reference/check_pkgs_availability.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check Packages Availability — check_pkgs_availability","text":"pkgs Character vector package names. (Typically output spot_pkgs()). quietly logical: progress error messages suppressed?","code":""},{"path":"https://brshallo.github.io/funspotr/reference/check_pkgs_availability.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check Packages Availability — check_pkgs_availability","text":"Named logical vector indicating whether package available machine.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/check_pkgs_availability.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check Packages Availability — check_pkgs_availability","text":"","code":"library(funspotr) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  file_lines <- \" library(dplyr) require(tidyr) library(madeUpPkg)  as_tibble(mpg) %>%   group_by(class) %>%   nest() %>%   mutate(stats = purrr::map(data,                             ~lm(cty ~ hwy, data = .x)))  made_up_fun() \"  file_output <- tempfile(fileext = \".R\") writeLines(file_lines, file_output)  spot_pkgs(file_output) %>%   check_pkgs_availability() #>     dplyr     tidyr madeUpPkg     purrr  #>      TRUE      TRUE     FALSE      TRUE"},{"path":"https://brshallo.github.io/funspotr/reference/funspotr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"funspotr: Spot R Functions & Packages — funspotr-package","title":"funspotr: Spot R Functions & Packages — funspotr-package","text":"learn funspotr see https://github.com/brshallo/funspotr","code":""},{"path":[]},{"path":"https://brshallo.github.io/funspotr/reference/funspotr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"funspotr: Spot R Functions & Packages — funspotr-package","text":"Maintainer: Bryan Shalloway brshallodev@gmail.com","code":""},{"path":"https://brshallo.github.io/funspotr/reference/install_missing_pkgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Install Missing Packages From CRAN — install_missing_pkgs","title":"Install Missing Packages From CRAN — install_missing_pkgs","text":"Attempt install missing packages CRAN. cases, safer clone use renv::dependencies(). See README example. first verify packages specified available CRAN, otherwise error.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/install_missing_pkgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install Missing Packages From CRAN — install_missing_pkgs","text":"","code":"install_missing_pkgs(pkgs_availability)"},{"path":"https://brshallo.github.io/funspotr/reference/install_missing_pkgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install Missing Packages From CRAN — install_missing_pkgs","text":"pkgs_availability Named logical vector names packages -- generally output running check_pkgs_availability().","code":""},{"path":"https://brshallo.github.io/funspotr/reference/install_missing_pkgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Install Missing Packages From CRAN — install_missing_pkgs","text":"Installs packages cran using remotes::install_cran() available, else install.packages()","code":""},{"path":"https://brshallo.github.io/funspotr/reference/install_missing_pkgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install Missing Packages From CRAN — install_missing_pkgs","text":"","code":"if (FALSE) { library(funspotr) library(dplyr)  file_lines <- \" library(dplyr) require(tidyr)  as_tibble(mpg) %>%   group_by(class) %>%   nest() %>%   mutate(stats = purrr::map(data,                             ~lm(cty ~ hwy, data = .x)))  \"  file_output <- tempfile(fileext = '.R') writeLines(file_lines, file_output)  spot_pkgs(file_output) %>%   check_pkgs_availability() %>%   install_missing_pkgs() }"},{"path":"https://brshallo.github.io/funspotr/reference/list_files_github_gists.html","id":null,"dir":"Reference","previous_headings":"","what":"List Github Gists of User — list_files_github_gists","title":"List Github Gists of User — list_files_github_gists","text":"Given username, return dataframe paths gists user.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/list_files_github_gists.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Github Gists of User — list_files_github_gists","text":"","code":"list_files_github_gists(   user,   pattern = stringr::regex(\"(r|rmd|rmarkdown|qmd)$\", ignore_case = TRUE) )"},{"path":"https://brshallo.github.io/funspotr/reference/list_files_github_gists.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Github Gists of User — list_files_github_gists","text":"user Character string username whose github gists want pull. pattern Regex pattern keep matching files. Default stringr::regex(\"(r|rmd|rmarkdown|qmd)$\", ignore_case = TRUE) keep R, Rmarkdown Quarto documents. lot .md gists can converted .R files may want edit argument. keep files use \".\".","code":""},{"path":"https://brshallo.github.io/funspotr/reference/list_files_github_gists.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Github Gists of User — list_files_github_gists","text":"Dataframe relative_paths absolute_paths file paths. gists exist folder structure relative_paths generally just file name. absolute_paths url raw file. See unnest_results() helper put easier read format.","code":""},{"path":[]},{"path":"https://brshallo.github.io/funspotr/reference/list_files_github_gists.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Github Gists of User — list_files_github_gists","text":"","code":"# \\donttest{ library(dplyr) library(funspotr)  # pulling and analyzing my R file github gists gists_urls <- list_files_github_gists(\"brshallo\", pattern = \".\")  # Will just parse the first 2 files/gists # Note that is easy to hit the API limit if have lots of gists contents <- filter(gists_urls, str_detect_r_docs(absolute_paths)) %>%   slice(1:2) %>%   spot_funs_files() #>  ■■■■■■■■■■■■■■■■                  50% |  ETA:  1s   contents %>%   unnest_results() #> # A tibble: 29 × 4 #>    funs      pkgs      relative_paths                  absolute_paths            #>    <chr>     <chr>     <chr>                           <chr>                     #>  1 library   base      find_in_files.R                 https://gist.githubuserc… #>  2 dir_ls    fs        find_in_files.R                 https://gist.githubuserc… #>  3 map       purrr     find_in_files.R                 https://gist.githubuserc… #>  4 grep      base      find_in_files.R                 https://gist.githubuserc… #>  5 readLines base      find_in_files.R                 https://gist.githubuserc… #>  6 keep      purrr     find_in_files.R                 https://gist.githubuserc… #>  7 length    base      find_in_files.R                 https://gist.githubuserc… #>  8 library   base      rolling-mean-conditioned-date.R https://gist.githubuserc… #>  9 seq       base      rolling-mean-conditioned-date.R https://gist.githubuserc… #> 10 map       (unknown) rolling-mean-conditioned-date.R https://gist.githubuserc… #> # ℹ 19 more rows # }"},{"path":"https://brshallo.github.io/funspotr/reference/list_files_github_repo.html","id":null,"dir":"Reference","previous_headings":"","what":"List Files in Github Repo — list_files_github_repo","title":"List Files in Github Repo — list_files_github_repo","text":"Return dataframe containing paths files github repostiory. Generally used prior spot_{funs/pkgs}_files().","code":""},{"path":"https://brshallo.github.io/funspotr/reference/list_files_github_repo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Files in Github Repo — list_files_github_repo","text":"","code":"list_files_github_repo(   repo,   branch = NULL,   pattern = stringr::regex(\"(r|rmd|rmarkdown|qmd)$\", ignore_case = TRUE),   rmv_index = TRUE )"},{"path":"https://brshallo.github.io/funspotr/reference/list_files_github_repo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Files in Github Repo — list_files_github_repo","text":"repo Github repository, e.g. \"brshallo/feat-eng-lags-presentation\" branch Branch github repository, default \"main\". pattern Regex pattern keep matching files. Default stringr::regex(\"(r|rmd|rmarkdown|qmd)$\", ignore_case = TRUE) keep R, Rmarkdown Quarto documents. keep files use \".\". rmv_index Logical, repos containing blogdown sites index.R file root. Change FALSE want file removed.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/list_files_github_repo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Files in Github Repo — list_files_github_repo","text":"Dataframe columns relative_paths absolute_paths file path locations. absolute_paths urls raw files.","code":""},{"path":[]},{"path":"https://brshallo.github.io/funspotr/reference/list_files_github_repo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Files in Github Repo — list_files_github_repo","text":"","code":"# \\donttest{ library(dplyr) library(funspotr)  # pulling and analyzing my R file github gists gh_urls <- list_files_github_repo(\"brshallo/feat-eng-lags-presentation\", branch = \"main\")  # Will just parse the first 2 files/gists contents <- spot_funs_files(slice(gh_urls, 1:2))  contents %>%   unnest_results() #> # A tibble: 75 × 4 #>    funs            pkgs      relative_paths            absolute_paths            #>    <chr>           <chr>     <chr>                     <chr>                     #>  1 purl            knitr     R/Rmd-to-R.R              https://raw.githubuserco… #>  2 here            here      R/Rmd-to-R.R              https://raw.githubuserco… #>  3 getOption       base      R/feat-engineering-lags.R https://raw.githubuserco… #>  4 options         base      R/feat-engineering-lags.R https://raw.githubuserco… #>  5 library         base      R/feat-engineering-lags.R https://raw.githubuserco… #>  6 read_csv        (unknown) R/feat-engineering-lags.R https://raw.githubuserco… #>  7 arrange         (unknown) R/feat-engineering-lags.R https://raw.githubuserco… #>  8 mutate          (unknown) R/feat-engineering-lags.R https://raw.githubuserco… #>  9 slide_index_dbl (unknown) R/feat-engineering-lags.R https://raw.githubuserco… #> 10 days            (unknown) R/feat-engineering-lags.R https://raw.githubuserco… #> # ℹ 65 more rows # }"},{"path":"https://brshallo.github.io/funspotr/reference/list_files_wd.html","id":null,"dir":"Reference","previous_headings":"","what":"List Files in Working Directory — list_files_wd","title":"List Files in Working Directory — list_files_wd","text":"Return dataframe containing paths files working directory. Generally used prior spot_{funs/pkgs}_files().","code":""},{"path":"https://brshallo.github.io/funspotr/reference/list_files_wd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List Files in Working Directory — list_files_wd","text":"","code":"list_files_wd(   path = \".\",   pattern = stringr::regex(\"(r|rmd|rmarkdown|qmd)$\", ignore_case = TRUE),   rmv_index = TRUE )"},{"path":"https://brshallo.github.io/funspotr/reference/list_files_wd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List Files in Working Directory — list_files_wd","text":"path Character vector path. Default \".\" set starting location relative_paths. pattern Regex pattern keep matching files. Default stringr::regex(\"(r|rmd|rmarkdown|qmd)$\", ignore_case = TRUE) keep R, Rmarkdown Quarto documents. keep files use \".\". rmv_index Logical, repos containing blogdown sites index.R file root. Change FALSE want file removed.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/list_files_wd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List Files in Working Directory — list_files_wd","text":"Dataframe columns relative_paths absolute_paths.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/list_files_wd.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"List Files in Working Directory — list_files_wd","text":"Can also used outside working directory path specified.","code":""},{"path":[]},{"path":"https://brshallo.github.io/funspotr/reference/list_files_wd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"List Files in Working Directory — list_files_wd","text":"","code":"# \\donttest{ library(dplyr) library(funspotr)  # pulling and analyzing my R file github gists files_local <- list_files_wd()  # Will just parse the first 2 files/gists contents <- spot_funs_files(slice(files_local, 2:3))  contents %>%   unnest_results() #> # A tibble: 0 × 3 #> # ℹ 3 variables: pkgs <???>, relative_paths <fs::path>, absolute_paths <chr> # }"},{"path":"https://brshallo.github.io/funspotr/reference/network_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"funspotr Network Plot — network_plot","title":"funspotr Network Plot — network_plot","text":"Output simple network plot using visNetwork connecting either funs pkgs relative_paths/absolute_paths.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/network_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"funspotr Network Plot — network_plot","text":"","code":"network_plot(df, to = .data$pkgs, show_each_use = FALSE)"},{"path":"https://brshallo.github.io/funspotr/reference/network_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"funspotr Network Plot — network_plot","text":"df Dataframe containing columns relative_paths, absolute_paths either funs pkgs. Generally output running: github_spot_*() %>% unnest_results() funs pkgs show_each_use Binary, default FALSE. TRUE edge thickness based number times package function used.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/network_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"funspotr Network Plot — network_plot","text":"visNetwork plot","code":""},{"path":"https://brshallo.github.io/funspotr/reference/network_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"funspotr Network Plot — network_plot","text":"","code":"# \\donttest{ library(dplyr) library(funspotr)  gh_ex_pkgs <- list_files_github_repo(   repo = \"brshallo/feat-eng-lags-presentation\",   branch = \"main\") %>%   spot_funs_files() #>  ■■■■■■■■■■■■■■■■                  50% |  ETA:  2s  gh_ex_pkgs %>%   unnest_results() %>%   network_plot(to = pkgs)  {\"x\":{\"nodes\":{\"id\":[\"(unknown)\",\"base\",\"here\",\"httr\",\"jsonlite\",\"knitr\",\"stats\",\"R/Rmd-to-R.R\",\"R/feat-engineering-lags.R\",\"R/load-inspections-save-csv.R\",\"R/types-of-splits.R\"],\"value\":[3,3,2,1,1,2,2,2,4,6,2],\"color\":[\"#ECEEFC\",\"#ECEEFC\",\"#ECEEFC\",\"#ECEEFC\",\"#ECEEFC\",\"#ECEEFC\",\"#ECEEFC\",\"#4A6FE3\",\"#4A6FE3\",\"#4A6FE3\",\"#4A6FE3\"],\"shape\":[\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"dot\",\"square\",\"square\",\"square\",\"square\"],\"title\":[\"<p><b>(unknown)<\\/b><br>\",\"<p><b>base<\\/b><br>\",\"<p><b>here<\\/b><br>\",\"<p><b>httr<\\/b><br>\",\"<p><b>jsonlite<\\/b><br>\",\"<p><b>knitr<\\/b><br>\",\"<p><b>stats<\\/b><br>\",\"<p><b>R/Rmd-to-R.R<\\/b><br> https://raw.githubusercontent.com/brshallo/feat-eng-lags-presentation/main/R/Rmd-to-R.R<\\/p>\",\"<p><b>R/feat-engineering-lags.R<\\/b><br> https://raw.githubusercontent.com/brshallo/feat-eng-lags-presentation/main/R/feat-engineering-lags.R<\\/p>\",\"<p><b>R/load-inspections-save-csv.R<\\/b><br> https://raw.githubusercontent.com/brshallo/feat-eng-lags-presentation/main/R/load-inspections-save-csv.R<\\/p>\",\"<p><b>R/types-of-splits.R<\\/b><br> https://raw.githubusercontent.com/brshallo/feat-eng-lags-presentation/main/R/types-of-splits.R<\\/p>\"],\"absolute_paths\":[null,null,null,null,null,null,null,\"https://raw.githubusercontent.com/brshallo/feat-eng-lags-presentation/main/R/Rmd-to-R.R\",\"https://raw.githubusercontent.com/brshallo/feat-eng-lags-presentation/main/R/feat-engineering-lags.R\",\"https://raw.githubusercontent.com/brshallo/feat-eng-lags-presentation/main/R/load-inspections-save-csv.R\",\"https://raw.githubusercontent.com/brshallo/feat-eng-lags-presentation/main/R/types-of-splits.R\"],\"label\":[\"(unknown)\",\"base\",\"here\",\"httr\",\"jsonlite\",\"knitr\",\"stats\",\"R/Rmd-to-R.R\",\"R/feat-engineering-lags.R\",\"R/load-inspections-save-csv.R\",\"R/types-of-splits.R\"],\"x\":[-0.06401424725421778,0.1849477837949476,-0.2163209167056132,0.7818812963830901,1,-1,-0.1703039053143639,-0.8502086365508704,-0.4649721022816452,0.3191185511885857,0.1711537773957157],\"y\":[0.467088620814581,0.3885135635319841,-0.9301029761415007,-0.8336539332504584,-0.2095507010611399,-0.3756634747687609,-0.2440410589770461,-1,0.1502637574835339,-0.2772848211853152,1]},\"edges\":{\"from\":[\"R/Rmd-to-R.R\",\"R/Rmd-to-R.R\",\"R/feat-engineering-lags.R\",\"R/feat-engineering-lags.R\",\"R/feat-engineering-lags.R\",\"R/feat-engineering-lags.R\",\"R/load-inspections-save-csv.R\",\"R/load-inspections-save-csv.R\",\"R/load-inspections-save-csv.R\",\"R/load-inspections-save-csv.R\",\"R/load-inspections-save-csv.R\",\"R/load-inspections-save-csv.R\",\"R/types-of-splits.R\",\"R/types-of-splits.R\"],\"to\":[\"here\",\"knitr\",\"(unknown)\",\"base\",\"knitr\",\"stats\",\"(unknown)\",\"base\",\"here\",\"httr\",\"jsonlite\",\"stats\",\"(unknown)\",\"base\"],\"title\":[\"in file\",\"in file\",\"in file\",\"in file\",\"in file\",\"in file\",\"in file\",\"in file\",\"in file\",\"in file\",\"in file\",\"in file\",\"in file\",\"in file\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\",\"physics\":false},\"manipulation\":{\"enabled\":false},\"edges\":{\"smooth\":false,\"color\":{\"highlight\":\"#D33F6A\",\"hover\":\"#D33F6A\"}},\"physics\":{\"stabilization\":false},\"interaction\":{\"hover\":true,\"zoomSpeed\":1}},\"groups\":null,\"width\":\"100%\",\"height\":\"100vh\",\"idselection\":{\"enabled\":true,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":null,\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"igraphlayout\":{\"type\":\"square\"},\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\",\"highlight\":{\"enabled\":false,\"hoverNearest\":false,\"degree\":1,\"algorithm\":\"all\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":false,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"},\"legend\":{\"width\":0.2,\"useGroups\":false,\"position\":\"left\",\"ncol\":1,\"stepX\":100,\"stepY\":100,\"zoom\":true,\"edges\":{\"label\":[\"used/loaded in file\"],\"color\":[\"#D33F6A\"],\"font.align\":[\"top\"]},\"edgesToDataframe\":true,\"nodes\":{\"label\":[\"relative / absolute\",\"Packages Used\"],\"color\":[\"#4A6FE3\",\"#ECEEFC\"],\"font.align\":[\"top\",\"top\"]},\"nodesToDataframe\":true},\"export\":{\"type\":\"png\",\"css\":\"float:right;\",\"background\":\"#fff\",\"name\":\"funspotr-network-20231031.csv.png\",\"label\":\"PNG snapshot\"}},\"evals\":[],\"jsHooks\":[]}# }"},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs.html","id":null,"dir":"Reference","previous_headings":"","what":"Spot Functions — spot_funs","title":"Spot Functions — spot_funs","text":"Given file_path extract functions associated packages specified file.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spot Functions — spot_funs","text":"","code":"spot_funs(file_path, ...)"},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spot Functions — spot_funs","text":"file_path character vector path file. ... allows pass additional arguments spot_funs_custom().","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spot Functions — spot_funs","text":"Given default arguments missing packages, dataframe following columns returned: funs: specifying functions file. pkgs: package function came . funs custom function came package installed machine, pkgs return \"(unknown)\". Note unused loaded packages / pkgs dropped output. functions without available package returned value \"(unknown)\". See README documentation.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spot Functions — spot_funs","text":"spot_funs() uses spot_funs_custom() run -- less verbose version require passing packages separately. See README ?spot_funs_custom details function works arguments can passed (via ...). code syntax malformed properly parsed, function error.","code":""},{"path":[]},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spot Functions — spot_funs","text":"","code":"library(funspotr)  file_lines <- \" library(dplyr) require(tidyr) library(madeUpPkg)  as_tibble(mpg) %>%   group_by(class) %>%   nest() %>%   mutate(stats = purrr::map(data,                             ~lm(cty ~ hwy, data = .x)))  made_up_fun() \"  file_output <- tempfile(fileext = \".R\") writeLines(file_lines, file_output)  spot_funs(file_output) #> # A tibble: 9 × 2 #>   funs        pkgs      #>   <chr>       <chr>     #> 1 library     base      #> 2 require     base      #> 3 as_tibble   tidyr     #> 4 group_by    dplyr     #> 5 nest        tidyr     #> 6 mutate      dplyr     #> 7 map         purrr     #> 8 lm          stats     #> 9 made_up_fun (unknown)"},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs_custom.html","id":null,"dir":"Reference","previous_headings":"","what":"Spot Functions Custom — spot_funs_custom","title":"Spot Functions Custom — spot_funs_custom","text":"Engine runs spot_funs(). spot_funs_custom() options changing returned output producing print statements errors. also requires provide character vector pkgs rather identifying automatically via spot_pkgs().","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs_custom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spot Functions Custom — spot_funs_custom","text":"","code":"spot_funs_custom(   pkgs,   file_path,   show_each_use = FALSE,   keep_search_list = FALSE,   copy_local = TRUE,   print_pkgs_load_status = FALSE,   error_if_missing_pkg = FALSE,   keep_in_multiple_pkgs = FALSE )"},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs_custom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spot Functions Custom — spot_funs_custom","text":"pkgs Character vector packages added search space via require() import::() can found utils::find(). Generally returned value spot_pkgs(file_path, show_explicit_funs = TRUE). file_path character vector path file. show_each_use Logical, default FALSE. changed TRUE return individual rows time function used (rather just entire file). keep_search_list Logical, default FALSE. changed TRUE include entire search list function. May helpful debugging cases funspotr may good job recreating search list identifying packages function(s) came . print packages search list function. copy_local Logical, changed FALSE copy local temporary folder prior analysis. Many functions require file already .R file file exist locally. generally set TRUE unless hold. print_pkgs_load_status Logical, default FALSE. set TRUE print named vector logicals showing whether packages machine along warning messages come running require(). continue produce output function. error_if_missing_pkg Logical, default FALSE. set TRUE print_pkgs_load_status = TRUE automatically. package installed machine print load status individual pkgs result error. keep_in_multiple_pkgs Logical, default FALSE. set TRUE include outputted dataframe column in_multiple_pkgs: logical, whether function exists multiple packages loaded (.e. search space utils::find().","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs_custom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spot Functions Custom — spot_funs_custom","text":"Given default arguments missing packages, dataframe following columns returned: funs: specifying functions file. pkgs: package function came . funs custom function came package installed machine, pkgs return \"(unknown)\". Note unused loaded packages / pkgs dropped output. functions without available package returned value \"(unknown)\". See README documentation.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs_custom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spot Functions Custom — spot_funs_custom","text":"spot_funs_custom() also use cases trust spot_pkgs() properly identify package dependencies within file instead want pass character vector packages. See README description function works. package included pkgs, functions called come package assigned value \"(unknown)\" pkgs column returned output. can also use print_pkgs_load_status error_if_missing_pkg arguments alter output works cases packages machine. Explicit calls unexported functions .e. pkg:::fun() pkgs = \"(unknown)\" returned dataframe.","code":""},{"path":[]},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs_custom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spot Functions Custom — spot_funs_custom","text":"","code":"library(funspotr)  file_lines <- \" library(dplyr) require(tidyr) library(madeUpPkg)  as_tibble(mpg) %>%   group_by(class) %>%   nest() %>%   mutate(stats = purrr::map(data,                             ~lm(cty ~ hwy, data = .x)))  made_up_fun() \"  file_output <- tempfile(fileext = \".R\") writeLines(file_lines, file_output)  pkgs <- spot_pkgs(file_output)  spot_funs_custom(pkgs, file_output) #> # A tibble: 9 × 2 #>   funs        pkgs      #>   <chr>       <chr>     #> 1 library     base      #> 2 require     base      #> 3 as_tibble   tidyr     #> 4 group_by    dplyr     #> 5 nest        tidyr     #> 6 mutate      dplyr     #> 7 map         purrr     #> 8 lm          stats     #> 9 made_up_fun (unknown)  # If you'd rather it error when a pkg doesn't exist e.g. for {madeUpPkg} # set`error_if_missing_pkg = TRUE`"},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs_files.html","id":null,"dir":"Reference","previous_headings":"","what":"Spot Packages or Functions in dataframe of Paths — spot_funs_files","title":"Spot Packages or Functions in dataframe of Paths — spot_funs_files","text":"spot_pkgs_files() : Spot packages show-R Rmarkdown quarto documents dataframe filepaths. spot_funs_files() : Spot functions corresponding packages show-R Rmarkdown quarto documents dataframe filepaths.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spot Packages or Functions in dataframe of Paths — spot_funs_files","text":"","code":"spot_funs_files(df, ..., .progress = TRUE)  spot_pkgs_files(df, ..., .progress = TRUE)"},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spot Packages or Functions in dataframe of Paths — spot_funs_files","text":"df Dataframe containing column absolute_paths. ... Arguments passed onto spot_{pkgs|funs}(). .progress Whether show progress bar. Use TRUE turn basic progress bar, use string give name, see progress_bars details.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spot Packages or Functions in dataframe of Paths — spot_funs_files","text":"Dataframe relative_paths absolute_paths file paths along list-column spotted containing purrr::safely() named list \"result\" \"error\" file parsed. Use unnest_results() unnest \"result\" values.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs_files.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spot Packages or Functions in dataframe of Paths — spot_funs_files","text":"purrr::safely() wrapper mapping spot_pkgs() spot_funs() across multiple filepaths. .e. even files fail parse function continue . Default settings meant files package libraries referenced within files . See README details.","code":""},{"path":[]},{"path":"https://brshallo.github.io/funspotr/reference/spot_funs_files.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spot Packages or Functions in dataframe of Paths — spot_funs_files","text":"","code":"# \\donttest{ library(funspotr) library(dplyr)  list_files_github_repo(\"brshallo/feat-eng-lags-presentation\", branch = \"main\") %>%   spot_funs_files() #>  ■■■■■■■■■■■■■■■■■■■■■■■           75% |  ETA:  1s #> # A tibble: 4 × 3 #>   relative_paths                absolute_paths                      spotted      #>   <chr>                         <chr>                               <list>       #> 1 R/Rmd-to-R.R                  https://raw.githubusercontent.com/… <named list> #> 2 R/feat-engineering-lags.R     https://raw.githubusercontent.com/… <named list> #> 3 R/load-inspections-save-csv.R https://raw.githubusercontent.com/… <named list> #> 4 R/types-of-splits.R           https://raw.githubusercontent.com/… <named list> # }"},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs.html","id":null,"dir":"Reference","previous_headings":"","what":"Spot Packages — spot_pkgs","title":"Spot Packages — spot_pkgs","text":"Extract pkg called either library(pkg), require(pkg) requireNamespace(\"pkg\") pkg::fun(). identify packages loaded ways typically done interactive R scripts (e.g. relying DESCRIPTION file pkg something like source(\"lib-calls.R\")). Inspiration: blogdown#647.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spot Packages — spot_pkgs","text":"","code":"spot_pkgs(   file_path,   show_explicit_funs = FALSE,   copy_local = TRUE,   as_yaml_tags = FALSE )"},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spot Packages — spot_pkgs","text":"file_path String path file interest. show_explicit_funs cases function called explicitly, show package dependency function together. example script containing dplyr::select() (opposed library(dplyr); select()) spot_pkgs(show_explicit_funs = TRUE) return item \"dplyr::select\" rather just \"dplyr\") copy_local Logical, default TRUE. changed FALSE copy local temporary folder prior analysis. Many processes require file already .R file file exist locally, hence usually set TRUE. as_yaml_tags Logical, default FALSE. set TRUE flattens puts format convenient pasting \"tags\" section YAML header  Rmd document blogdown post.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spot Packages — spot_pkgs","text":"Character vector packages loaded file.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spot Packages — spot_pkgs","text":"cases show_explicit_funs = TRUE explicit calls package, \"pkg:fun\" returned instead. Packages extracted solely based text -- whether package actually exists . Hence even packages installed machine show-script returned character vector.","code":""},{"path":[]},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spot Packages — spot_pkgs","text":"","code":"library(funspotr)  file_lines <- \" library(dplyr) require(tidyr) library(madeUpPkg)  as_tibble(mpg) %>%   group_by(class) %>%   nest() %>%   mutate(stats = purrr::map(data,                             ~lm(cty ~ hwy, data = .x)))  made_up_fun() \"  file_output <- tempfile(fileext = \".R\") writeLines(file_lines, file_output)  spot_pkgs(file_output) #> [1] \"dplyr\"     \"tidyr\"     \"madeUpPkg\" \"purrr\"      # To view `purrr::map` as an explicit call spot_pkgs(file_output, show_explicit_funs = TRUE) #> [1] \"dplyr\"      \"tidyr\"      \"madeUpPkg\"  \"purrr::map\"  # To output for blogdown post YAML header tags cat(spot_pkgs(file_output, as_yaml_tags = TRUE)) #>   - dplyr #>   - tidyr #>   - madeUpPkg #>   - purrr"},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs_from_DESCRIPTION.html","id":null,"dir":"Reference","previous_headings":"","what":"Spot package dependencies from DESCRIPTION file — spot_pkgs_from_description","title":"Spot package dependencies from DESCRIPTION file — spot_pkgs_from_description","text":"Given explicit path DESCRIPTION file return package dependencies therein. Inspiration: blogdown#647.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs_from_DESCRIPTION.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spot package dependencies from DESCRIPTION file — spot_pkgs_from_description","text":"","code":"spot_pkgs_from_description(DESCRIPTION_path)"},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs_from_DESCRIPTION.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spot package dependencies from DESCRIPTION file — spot_pkgs_from_description","text":"DESCRIPTION_path Path DESCRIPTION file","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs_from_DESCRIPTION.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spot package dependencies from DESCRIPTION file — spot_pkgs_from_description","text":"Character vector packages.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs_from_DESCRIPTION.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spot package dependencies from DESCRIPTION file — spot_pkgs_from_description","text":"","code":"funspotr::spot_pkgs_from_description(   \"https://raw.githubusercontent.com/brshallo/animatrixr/master/DESCRIPTION\" ) #> [1] \"dplyr\"      \"purrr\"      \"ggplot2\"    \"gganimate\"  \"knitr\"      #> [6] \"rmarkdown\"  \"datasauRus\""},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs_used.html","id":null,"dir":"Reference","previous_headings":"","what":"Spot Packages Used — spot_pkgs_used","title":"Spot Packages Used — spot_pkgs_used","text":"Primarily used cases load metapackages like tidyverse tidymodels want return packages functions package actually called. E.g. say library(tidyverse) call end-using functions dplyr -- case spot_pkgs() return \"tidyverse\" whereas spot_pkgs_used() return \"dplyr\".","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs_used.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spot Packages Used — spot_pkgs_used","text":"","code":"spot_pkgs_used(file_path, as_yaml_tags = FALSE)"},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs_used.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spot Packages Used — spot_pkgs_used","text":"file_path String path file interest. as_yaml_tags Logical, default FALSE. set TRUE flattens puts format convenient pasting \"tags\" section blogdown post Rmd document.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs_used.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spot Packages Used — spot_pkgs_used","text":"Character vector packages functions used file.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_pkgs_used.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spot Packages Used — spot_pkgs_used","text":"Also return uninstalled packages loaded R starts . essentially just calling spot_funs() |> (unique(pkgs)) background. many options spot_pkgs() though.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_tags.html","id":null,"dir":"Reference","previous_headings":"","what":"Spot Tags — spot_tags","title":"Spot Tags — spot_tags","text":"Put quoted inline R function blogdown quarto post's YAML header packages packages used post (wrapper around funspotr::spot_pkgs()).","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_tags.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spot Tags — spot_tags","text":"","code":"spot_tags(   file_path = knitr::current_input(),   used = FALSE,   drop_knitr = FALSE,   yaml_bullet = NULL,   ... )"},{"path":"https://brshallo.github.io/funspotr/reference/spot_tags.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spot Tags — spot_tags","text":"file_path Default file knitted can change file (e.g. cases code post may reside different file). used Default FALSE. TRUE pass show_pkgs_used() rather show_pkgs(). (Mainly useful showing actual packages used rather meta-packages called like tidyverse tidymodels. Also uses strict parsing method. drop_knitr Many blogdown posts knitr::opts_chunk$set() may want tag showing-. Default keep , set FALSE drop \"knitr\" tagged. yaml_bullet Default NULL meaning file_path read-correct format guessed based \"spot_tags\" appearance either hyphen bracket (corresponding bulleted array format YAML header). first occurrence happens line contains bracket value becomes FALSE else becomes TRUE. set NULL \"spot_tags\" detected file_path default FALSE. yaml_bullet can also specified directly either TRUE FALSE. TRUE entails spot_tags() set YAML bullet, FALSE indicates user inputting array (see examples ). See examples hard-code. ... additional arguments pass spot_pkgs*().","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_tags.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spot Tags — spot_tags","text":"Character vector format meant read evaluating YAML header rendering.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/spot_tags.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spot Tags — spot_tags","text":"    Thanks Yihui suggestions getting working blogdown#647, blogdown#693.)","code":"tags:   - \"`r funspotr::spot_tags()`\" tags: [\"`r funspotr::spot_tags()`\"] categories: [\"`r funspotr::spot_tags()`\"]"},{"path":[]},{"path":"https://brshallo.github.io/funspotr/reference/spot_tags.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spot Tags — spot_tags","text":"","code":"# To review input interactively from within rstudio you might also try: if (FALSE) { funspotr::spot_tags(rstudioapi::getSourceEditorContext()$path) }"},{"path":"https://brshallo.github.io/funspotr/reference/str_detect_r_docs.html","id":null,"dir":"Reference","previous_headings":"","what":"String Detect R or Rmarkdown or Quarto File endings — str_detect_r_docs","title":"String Detect R or Rmarkdown or Quarto File endings — str_detect_r_docs","text":"Wrapper stringr::str_detect() return TRUE R Rmarkdown Quarto files, else FALSE.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/str_detect_r_docs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"String Detect R or Rmarkdown or Quarto File endings — str_detect_r_docs","text":"","code":"str_detect_r_docs(   contents,   pattern = stringr::regex(\"(r|rmd|rmarkdown|qmd)$\", ignore_case = TRUE),   rmv_index = TRUE )"},{"path":"https://brshallo.github.io/funspotr/reference/str_detect_r_docs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"String Detect R or Rmarkdown or Quarto File endings — str_detect_r_docs","text":"contents Character vector file path. pattern Regex pattern identify file types. rmv_index Logical, default TRUE, repos containing blogdown sites index.R file root. Change FALSE want file removed.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/str_detect_r_docs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String Detect R or Rmarkdown or Quarto File endings — str_detect_r_docs","text":"Logical vector.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/str_detect_r_docs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"String Detect R or Rmarkdown or Quarto File endings — str_detect_r_docs","text":"","code":"files <- c(\"file1.R\", \"file2.Rmd\", \"file3.Rmarkdown\", \"file4.Rproj\", \"file5.qmd\") funspotr::str_detect_r_docs(files) #> [1]  TRUE  TRUE  TRUE FALSE  TRUE"},{"path":"https://brshallo.github.io/funspotr/reference/unnest_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Unnest Results — unnest_results","title":"Unnest Results — unnest_results","text":"Run running list_files_*() |> spot_{funs|pkgs}_files() unnest spotted list-column.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/unnest_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unnest Results — unnest_results","text":"","code":"unnest_results(df)"},{"path":"https://brshallo.github.io/funspotr/reference/unnest_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unnest Results — unnest_results","text":"df Dataframe outputted spot_{funs|pkgs}_files() contains spotted list-column.","code":""},{"path":"https://brshallo.github.io/funspotr/reference/unnest_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Unnest Results — unnest_results","text":"unnested dataframe spotted moved front.","code":""},{"path":[]},{"path":"https://brshallo.github.io/funspotr/reference/unnest_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Unnest Results — unnest_results","text":"","code":"# \\donttest{ library(funspotr) library(dplyr)  list_files_github_repo(\"brshallo/feat-eng-lags-presentation\", branch = \"main\") %>%   spot_funs_files() %>%   unnest_results() #>  ■■■■■■■■■■■■■■■■■■■■■■■           75% |  ETA:  1s #> # A tibble: 114 × 4 #>    funs            pkgs      relative_paths            absolute_paths            #>    <chr>           <chr>     <chr>                     <chr>                     #>  1 purl            knitr     R/Rmd-to-R.R              https://raw.githubuserco… #>  2 here            here      R/Rmd-to-R.R              https://raw.githubuserco… #>  3 getOption       base      R/feat-engineering-lags.R https://raw.githubuserco… #>  4 options         base      R/feat-engineering-lags.R https://raw.githubuserco… #>  5 library         base      R/feat-engineering-lags.R https://raw.githubuserco… #>  6 read_csv        (unknown) R/feat-engineering-lags.R https://raw.githubuserco… #>  7 arrange         (unknown) R/feat-engineering-lags.R https://raw.githubuserco… #>  8 mutate          (unknown) R/feat-engineering-lags.R https://raw.githubuserco… #>  9 slide_index_dbl (unknown) R/feat-engineering-lags.R https://raw.githubuserco… #> 10 days            (unknown) R/feat-engineering-lags.R https://raw.githubuserco… #> # ℹ 104 more rows # }"},{"path":[]},{"path":"https://brshallo.github.io/funspotr/news/index.html","id":"funspotr-003","dir":"Changelog","previous_headings":"","what":"funspotr 0.0.3","title":"funspotr 0.0.3","text":"CRAN release: 2023-10-25 Add support quarto documents spot*files() remove keep_non_r argument add pattern argument longer export github_* functions (instead use list_*() |> spot_{pkgs|funs}_files()) Update old blog post gists compatible --date funspotr API Publish CRAN","code":""},{"path":"https://brshallo.github.io/funspotr/news/index.html","id":"funspotr-002","dir":"Changelog","previous_headings":"","what":"funspotr 0.0.2","title":"funspotr 0.0.2","text":"Fix quoted library calls identified, e.g. library(\"dplyr\")","code":""},{"path":"https://brshallo.github.io/funspotr/news/index.html","id":"funspotr-001","dir":"Changelog","previous_headings":"","what":"funspotr 0.0.1","title":"funspotr 0.0.1","text":"Initial release rstudio conf presentation","code":""}]
